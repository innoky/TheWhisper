from aiogram import types, F, Dispatcher
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode, ContentType
from datetime import datetime, timedelta, timezone
import os
import pytz
from datetime import time
from db.wapi import get_last_post, try_create_post, mark_post_as_posted, mark_post_as_rejected_by_telegram_id, get_post_by_telegram_id, process_post_payment, get_user_info, get_active_posts_count, publish_post_now, get_last_published_post_time, recalculate_queue_after_immediate_publication, try_create_user
from SugQueue import publish_to_channel, update_post_channel_info, send_publication_notification
import logging
import re
import aiohttp
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message


ACTIVE_START_HOUR = 10  # 10:00
ACTIVE_END_HOUR = 1     # 01:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
POST_INTERVAL_MINUTES = 30
BOT_NAME = os.getenv("ORACLE_BOT_NAME")

async def send_submission_notification(bot, user_id: int, post_content: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"""
    try:
        notification_text = (
            "‚úâÔ∏è <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n\n"
            "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
            f"<code>{post_content[:300]}{'...' if len(post_content) > 300 else ''}</code>\n\n"
            f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            "<b>–ü—Ä–æ—Ü–µ—Å—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>\n"
            "<blockquote>‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏\n"
            "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏</blockquote>\n\n"
            "üì¨ <i>–ü–æ–∫–∞ –æ–∂–∏–¥–∞–µ—Ç–µ: –∏–∑—É—á–∏—Ç–µ /help –∏ /market</i>"
        )
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML"
        )
        logging.info(f"[send_submission_notification] Submission notification sent to user {user_id}")
    except Exception as e:
        logging.error(f"[send_submission_notification] Error sending submission notification: {e}")


async def send_rejection_notification(bot, user_id: int, post_content: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        notification_text = (
            "‚ùå <b>–í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\n\n"
            "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
            f"<code>{post_content[:300]}{'...' if len(post_content) > 300 else ''}</code>\n\n"
            "<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "<blockquote>‚Ä¢ –í–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</blockquote>\n\n"
            "<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            "<blockquote>‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å</blockquote>\n\n"
            "<b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ /market ‚Äî –∫—É–ø–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã\n\n"
            f"<b>–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}"
        )
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML"
        )
        logging.info(f"[send_rejection_notification] Rejection notification sent to user {user_id}")
    except Exception as e:
        logging.error(f"[send_rejection_notification] Error sending rejection notification: {e}")


async def send_approval_notification(bot, user_id: int, post_content: str, scheduled_time: datetime, queue_position: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        scheduled_time_str = scheduled_time.strftime("%d.%m.%Y –≤ %H:%M")
        time_diff = (scheduled_time - datetime.now(timezone(timedelta(hours=3)))).total_seconds() / 60
        notification_text = (
            "‚úÖ <b>–í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω</b>\n\n"
            "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
            f"<code>{post_content[:300]}{'...' if len(post_content) > 300 else ''}</code>\n\n"
        )
        if queue_position and queue_position > 1:
            notification_text += (
                f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å</i>\n"
                f"<b>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:</b> <b>#{queue_position}</b>\n"
                f"<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
                + (f"<b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <i>{time_diff:.0f} –º–∏–Ω—É—Ç</i>\n" if time_diff > 0 else "<b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è:</b> <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ</i>\n")
            )
        else:
            if time_diff > 0:
                notification_text += (
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</i>\n"
                    f"<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
                    f"<b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <i>{time_diff:.0f} –º–∏–Ω—É—Ç</i>\n"
                )
            else:
                notification_text += (
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ</i>\n"
                    f"<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
                )
        notification_text += (
            "\nüí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>50-500 —Ç–æ–∫–µ–Ω–æ–≤</b> –∑–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è)\n"
            "<b>–°–æ–≤–µ—Ç:</b> <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ /market</blockquote>\n\n"
            "<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        )
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML"
        )
        logging.info(f"[send_approval_notification] Approval notification sent to user {user_id}")
    except Exception as e:
        logging.error(f"[send_approval_notification] Error sending approval notification: {e}")


async def send_publication_and_payment_notification(bot, user_id: int, post_content: str, tokens_added: int, new_balance: str, channel_message_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç–µ"""
    try:
        channel_id = os.getenv("CHANNEL_ID")
        if not channel_id:
            logging.error(f"[send_publication_and_payment_notification] CHANNEL_ID not set")
            return
        if channel_id.startswith('-100'):
            channel_id = channel_id[4:]
        post_link = f"https://t.me/c/{channel_id}/{channel_message_id}"
        notification_text = (
            "üöÄ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ–ø–ª–∞—á–µ–Ω</b>\n\n"
            "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
            f"<code>{post_content[:300]}{'...' if len(post_content) > 300 else ''}</code>\n\n"
            f"<b>–°—Å—ã–ª–∫–∞:</b> <a href=\"{post_link}\">–û—Ç–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª–µ</a>\n\n"
            f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> <b>+{tokens_added} —Ç.</b> (–±–∞–ª–∞–Ω—Å: <b>{new_balance} —Ç.</b>)\n\n"
            f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ /market –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤</i>"
        )
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"[send_publication_and_payment_notification] Combined notification sent to user {user_id}")
    except Exception as e:
        logging.error(f"[send_publication_and_payment_notification] Error sending combined notification: {e}")


def save_post_to_db(user_id: int, text: str):
    # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    print(f"[DB] Saved post from {user_id}: {text[:30]}...")


def get_content_type_and_text(message: types.Message) -> tuple[str, str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î
    """
    if message.text:
        return "text", message.text.strip()
    elif message.photo:
        caption = message.caption or ""
        return "photo", f"[PHOTO] {caption}".strip()
    elif message.animation:
        caption = message.caption or ""
        return "gif", f"[GIF] {caption}".strip()
    elif message.sticker:
        return "sticker", "[STICKER]"
    elif message.video:
        caption = message.caption or ""
        return "video", f"[VIDEO] {caption}".strip()
    elif message.voice:
        return "voice", "[VOICE]"
    elif message.audio:
        caption = message.caption or ""
        return "audio", f"[AUDIO] {caption}".strip()
    elif message.document:
        caption = message.caption or ""
        return "document", f"[DOCUMENT] {caption}".strip()
    else:
        return "unknown", "[UNKNOWN CONTENT]"


def format_username(username):
    if not username or str(username).lower() == 'none':
        return 'N/A'
    return username


class SuggestStates(StatesGroup):
    waiting_for_confirm = State()


def register_suggest_handler(dp: Dispatcher):
    @dp.message()
    async def suggest_handler(message: types.Message, state: FSMContext):
        if message.from_user and message.from_user.first_name == "Telegram":
            comment_url = f"https://t.me/{BOT_NAME}?start={message.message_id}"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å", url=comment_url)]
                ]
            )
            await message.reply(
                "<b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É:</b>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            return

        if message.chat.type == 'private':
            content_type, post_content = get_content_type_and_text(message)
            user_id = message.from_user.id
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
            found_similar = False
            similar_link = None
            similar_content = None
            try:
                import aiohttp
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        "http://askmephi_search:8001/search/",
                        params={"question": post_content},
                        timeout=aiohttp.ClientTimeout(total=5)
                    ) as resp:
                        data = await resp.json()
                if data.get("found"):
                    found_similar = True
                    similar_link = data["link"]
                    similar_content = data.get("content")
            except Exception as e:
                logging.warning(f"[suggest_handler] tf-idf search error: {e}")

            if found_similar:
                preview = ""
                if isinstance(similar_content, str) and similar_content.strip():
                    words = similar_content.split()
                    preview = ' '.join(words[:15]) + ("..." if len(words) > 15 else "")
                text = (
                    "<b>–ü–æ—Ö–æ–∂–∏–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
                    + (f"<blockquote>{preview}</blockquote>\n" if preview else "")
                    + f"<a href='{similar_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</a>\n\n"
                    + "<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
                    + f"<blockquote>{post_content}</blockquote>\n\n"
                    + "–í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É?"
                )
            else:
                text = (
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:\n\n"
                    f"<blockquote>{post_content}</blockquote>\n\n"
                    f"–ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'."
                )
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_suggest_{user_id}")]
                ]
            )
            sent = await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
            if sent and hasattr(sent, 'message_id'):
                await state.update_data(confirm_msg_id=sent.message_id)
            await state.set_state(SuggestStates.waiting_for_confirm)
            return

    @dp.callback_query(F.data.startswith("confirm_suggest_"))
    async def confirm_suggest_callback(callback: types.CallbackQuery, state: FSMContext):
        msg_obj = callback.message
        if not msg_obj or not hasattr(msg_obj, 'reply_to_message') or not isinstance(msg_obj.reply_to_message, Message):
            logging.error('confirm_suggest_callback: reply_to_message is not a valid Message')
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        original_msg = msg_obj.reply_to_message
        if not original_msg or not hasattr(original_msg, 'from_user') or not original_msg.from_user:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        user_id = original_msg.from_user.id
        content_type, post_content = get_content_type_and_text(original_msg)
        offers_chat_id = os.getenv('ORACLE_OFFERS_CHAT_ID')
        if offers_chat_id is None:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω offers_chat_id")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_obj.message_id)
        except Exception:
            pass

        # 1. –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ offers_chat_id
        if not hasattr(original_msg, 'message_id') or original_msg.message_id is None:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å message_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        msg = await callback.bot.copy_message(
            chat_id=offers_chat_id,
            from_chat_id=callback.message.chat.id if hasattr(callback.message, 'chat') and callback.message.chat else offers_chat_id,
            message_id=original_msg.message_id
        )

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º admin_message
        author_info = await get_user_info(user_id)
        author_username = author_info.get('username', 'N/A')
        author_firstname = author_info.get('firstname', '')
        author_lastname = author_info.get('lastname', '')
        author_level = author_info.get('level', 'N/A')
        author_balance = author_info.get('balance', 'N/A')
        admin_message = (
            f"#–Ω–µ–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ\n"
            f"<b>–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ</b>\n\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> <code>{user_id}</code> @{author_username}\n"
            f"<b>–ò–º—è:</b> {author_firstname} {author_lastname}\n"
            f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {author_level}\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> {author_balance} —Ç.\n"
            f"<b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content_type}\n"
            f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            f"<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_content[:300]}{'...' if post_content and len(post_content) > 300 else ''}"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{original_msg.message_id}"),
                 InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"approve_{original_msg.message_id}")]
            ]
        )
        if not hasattr(msg_obj, 'bot') or msg_obj.bot is None:
            logging.error('message.bot is None')
            return
        await msg_obj.bot.send_message(
            chat_id=offers_chat_id,
            text=admin_message,
            reply_to_message_id=msg.message_id if msg and hasattr(msg, 'message_id') else None,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

        # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_submission_notification(msg_obj.bot, user_id, post_content)
        await callback.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        await state.clear()

    @dp.callback_query(F.data.startswith(("reject_",)))
    async def reject_callback(callback: types.CallbackQuery):
        try:
            telegram_id = int(callback.data.split("_")[1])
        except (IndexError, ValueError, AttributeError):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å id –≤–æ–ø—Ä–æ—Å–∞")
            return
        post_info = await get_post_by_telegram_id(telegram_id)
        if not post_info or 'error' in post_info:
            logging.info(f"[reject_callback] Post not in queue, just rejecting")
            user_id = 'N/A'
            post_content = ''
            content_type = 'text'
        else:
            result = await mark_post_as_rejected_by_telegram_id(telegram_id)
            logging.info(f"[reject_callback] Post removed from queue: {result}")
            user_id = post_info.get('author', 'N/A')
            post_content = post_info.get('content', '')
            content_type = post_info.get('media_type', 'text')
        author_info = await get_user_info(user_id) if user_id != 'N/A' else {}
        author_username = author_info.get('username', 'N/A')
        author_firstname = author_info.get('firstname', '')
        author_lastname = author_info.get('lastname', '')
        author_level = author_info.get('level', 'N/A')
        author_balance = author_info.get('balance', 'N/A')
        admin_message_text = f"‚ùå <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n"
        admin_message_text += f"<b>–ê–≤—Ç–æ—Ä:</b> <code>{user_id}</code> @{author_username}\n"
        admin_message_text += f"<b>–ò–º—è:</b> {author_firstname} {author_lastname}\n"
        admin_message_text += f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {author_level}\n"
        admin_message_text += f"<b>–ë–∞–ª–∞–Ω—Å:</b> {author_balance} —Ç.\n"
        admin_message_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_content[:100]}{'...' if len(post_content) > 100 else ''}\n"
        admin_message_text += f"üìÑ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content_type}\n\n"
        admin_message_text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
        admin_message_text += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
        await callback.message.edit_text(
            text=admin_message_text,
            parse_mode="HTML"
        )
        await callback.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω!")
        if user_id != 'N/A':
            await send_rejection_notification(callback.bot, user_id, post_content)

    @dp.callback_query(F.data.startswith(("approve_",)))
    async def approve_callback(callback: types.CallbackQuery):
        msg_obj = callback.message
        if not msg_obj or not hasattr(msg_obj, 'reply_to_message') or not isinstance(msg_obj.reply_to_message, Message):
            logging.error('approve_callback: reply_to_message is not a valid Message')
            await callback.answer('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            return
        original_msg = msg_obj.reply_to_message
        if not original_msg or not hasattr(original_msg, 'from_user') or not original_msg.from_user:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        user_id = original_msg.from_user.id
        content_type, post_content = get_content_type_and_text(original_msg)
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
        await try_create_user(
            user_id=user_id,
            username=original_msg.from_user.username,
            firstname=original_msg.from_user.first_name,
            lastname=original_msg.from_user.last_name
        )
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(timezone(timedelta(hours=3)))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
        active_posts_count = await get_active_posts_count()
        logging.info(f"[approve_callback] Active posts in queue: {active_posts_count}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        if active_posts_count > 0:
            last_post_data = await get_last_post()
            last_post_time_str = last_post_data.get('posted_at')
            try:
                if last_post_time_str and ('+' in last_post_time_str or 'Z' in last_post_time_str):
                    last_post_dt = datetime.strptime(last_post_time_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                    last_post_dt = last_post_dt.astimezone(moscow_tz)
                else:
                    last_post_dt = moscow_tz.localize(datetime.strptime(last_post_time_str, "%Y-%m-%d %H:%M:%S")) if last_post_time_str else now
            except ValueError as e:
                last_post_dt = now
            scheduled_time = last_post_dt + timedelta(minutes=POST_INTERVAL_MINUTES)
        else:
            last_published_data = await get_last_published_post_time()
            if 'error' in last_published_data:
                scheduled_time = now
            else:
                last_post_time_str = last_published_data.get('channel_posted_at')
                try:
                    if last_post_time_str and ('+' in last_post_time_str or 'Z' in last_post_time_str):
                        last_post_dt = datetime.strptime(last_post_time_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                        last_post_dt = last_post_dt.astimezone(moscow_tz)
                    else:
                        last_post_dt = moscow_tz.localize(datetime.strptime(last_post_time_str, "%Y-%m-%d %H:%M:%S"))
                    time_since_last_post = (now - last_post_dt).total_seconds() / 60
                    if time_since_last_post >= POST_INTERVAL_MINUTES:
                        scheduled_time = now
                    else:
                        remaining_minutes = POST_INTERVAL_MINUTES - time_since_last_post
                        scheduled_time = now + timedelta(minutes=remaining_minutes)
                except ValueError as e:
                    scheduled_time = now

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (01:00-10:00)
        scheduled_hour = scheduled_time.hour
        if 1 <= scheduled_hour < 10:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Ä–µ–º—è –Ω–∞ 10:00 —Ç–æ–≥–æ –∂–µ –¥–Ω—è
            scheduled_time = scheduled_time.replace(hour=10, minute=0, second=0, microsecond=0)
            logging.info(f"[approve_callback] Post scheduled time moved to 10:00 due to inactive hours (was {scheduled_hour}:{scheduled_time.minute})")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î
        content_type, post_content = get_content_type_and_text(original_msg)
        if not post_content:
            await callback.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–π!")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º payload –¥–ª—è try_create_post
        logging.info(f"[approve_callback] try_create_post payload: author_id={user_id}, content={post_content[:100]}, telegram_id={original_msg.message_id}, post_time={scheduled_time}")

        # –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ API
        create_result = await try_create_post(author_id=user_id, content=post_content, telegram_id=original_msg.message_id, post_time=scheduled_time)
        logging.info(f"[approve_callback] try_create_post result: {create_result}")
        if 'error' in create_result:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞!")
            return

        # –ü–æ–ª—É—á–∞–µ–º post_info –ø–æ telegram_id
        post_info = await get_post_by_telegram_id(original_msg.message_id)
        if 'error' in post_info or not post_info.get('id'):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!")
            return

        # –ù–æ–≤—ã–π –±–ª–æ–∫: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∞–º–∏
        hashtags_env = os.getenv('ASK_HASHTAGS', '')
        hashtags = [h.strip() for h in hashtags_env.split(';') if h.strip()]
        if hashtags:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"#{h}", callback_data=f"set_theme_{post_info['id']}_{h}")] for h in hashtags
                ] + [
                    [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{post_info['id']}")]
                ]
            )
            await callback.message.edit_text(
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
        now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)
        post_time_utc = post_info.get('posted_at')
        if post_time_utc:
            try:
                if '+' in post_time_utc or 'Z' in post_time_utc:
                    post_time_dt = datetime.strptime(post_time_utc.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                else:
                    post_time_dt = datetime.strptime(post_time_utc, "%Y-%m-%d %H:%M:%S")
                    post_time_dt = post_time_dt.replace(tzinfo=timezone.utc)
            except Exception:
                post_time_dt = now_utc
        else:
            post_time_dt = now_utc

        if now_utc >= post_time_dt:
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–æ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ–º
            publish_result = await publish_post_now(post_info['id'])
            if 'error' in publish_result:
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_result['error']}")
                return
            tokens_added = publish_result.get('tokens_added', 0)
            author_level = publish_result.get('author_level', 1)
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            success, channel_message_id = await publish_to_channel(post_info, callback.bot)
            if not success:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª")
                return
            await update_post_channel_info(post_info['id'], channel_message_id)
            await recalculate_queue_after_immediate_publication()
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_publication_and_payment_notification(callback.bot, user_id, post_info.get('content', ''), tokens_added, publish_result.get('author_balance', 'N/A'), channel_message_id)
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ—É –æ–± –∞–≤—Ç–æ—Ä–µ
            author_info = await get_user_info(user_id)
            author_username = author_info.get('username', 'N/A')
            author_firstname = author_info.get('firstname', '')
            author_lastname = author_info.get('lastname', '')
            author_level = author_info.get('level', 'N/A')
            author_balance = author_info.get('balance', 'N/A')
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            admin_message_text = f"üöÄ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ–ø–ª–∞—á–µ–Ω</b>\n\n"
            admin_message_text += f"<b>–ê–≤—Ç–æ—Ä:</b> <code>{user_id}</code> @{author_username}\n"
            admin_message_text += f"<b>–ò–º—è:</b> {author_firstname} {author_lastname}\n"
            admin_message_text += f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {author_level}\n"
            admin_message_text += f"<b>–ë–∞–ª–∞–Ω—Å:</b> {author_balance} —Ç.\n"
            admin_message_text += f"<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_info.get('content', '')[:100]}{'...' if len(post_info.get('content', '')) > 100 else ''}\n\n"
            admin_message_text += f"<b>–û–ø–ª–∞—Ç–∞:</b>\n"
            admin_message_text += f"<b>–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞:</b> {author_level}\n"
            admin_message_text += f"<b>–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ:</b> {tokens_added}\n"
            admin_message_text += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞:</b> {publish_result.get('author_balance', 'N/A')} —Ç.\n\n"
            admin_message_text += f"<b>ID –≤–æ–ø—Ä–æ—Å–∞:</b> {post_info['id']}\n"
            admin_message_text += f"<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_message_text += f"<b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
            admin_message_text = re.sub(r"#–Ω–µ–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", "#–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", admin_message_text)
            await callback.message.edit_text(text=admin_message_text, parse_mode="HTML")
        else:
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äî —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
            scheduled_time_str = scheduled_time.strftime("%d.%m.%Y –≤ %H:%M")
            queue_position = active_posts_count + 1 if active_posts_count > 0 else 1
            await send_approval_notification(callback.bot, user_id, post_content, scheduled_time, queue_position)
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ—É –æ–± –∞–≤—Ç–æ—Ä–µ
            author_info = await get_user_info(user_id)
            author_username = author_info.get('username', 'N/A')
            author_firstname = author_info.get('firstname', '')
            author_lastname = author_info.get('lastname', '')
            author_level = author_info.get('level', 'N/A')
            author_balance = author_info.get('balance', 'N/A')
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–º
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{post_info['id']}")],
                    [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_now_{post_info['id']}")]
                ]
            )
            admin_message_text = f"#–Ω–µ–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ\nüïí <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å</b>\n\n"
            admin_message_text += f"<b>–ê–≤—Ç–æ—Ä:</b> <code>{user_id}</code> @{author_username}\n"
            admin_message_text += f"<b>–ò–º—è:</b> {author_firstname} {author_lastname}\n"
            admin_message_text += f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {author_level}\n"
            admin_message_text += f"<b>–ë–∞–ª–∞–Ω—Å:</b> {author_balance} —Ç.\n"
            admin_message_text += f"<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_content[:100]}{'...' if len(post_content) > 100 else ''}\n\n"
            admin_message_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> –í –æ—á–µ—Ä–µ–¥–∏\n"
            admin_message_text += f"<b>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {queue_position}\n"
            admin_message_text += f"<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
            admin_message_text += f"<b>ID –≤–æ–ø—Ä–æ—Å–∞:</b> {post_info['id']}\n"
            admin_message_text += f"<b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
            admin_message_text = re.sub(r"#–Ω–µ–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", "#–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", admin_message_text)
            await callback.message.edit_text(text=admin_message_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("–í–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

    @dp.callback_query(F.data.startswith(("publish_now_",)))
    async def publish_now_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å' - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ"""
        try:
            telegram_id = int(callback.data.split("_")[2])
        except (IndexError, ValueError, AttributeError):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å id –≤–æ–ø—Ä–æ—Å–∞")
            return
        post_info = await get_post_by_telegram_id(telegram_id)
        if not post_info or 'error' in post_info:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
        await callback.answer("üöÄ –ü—É–±–ª–∏–∫—É–µ–º –≤–æ–ø—Ä–æ—Å...")
        
        try:
            logging.info(f"[publish_now_callback] Processing immediate publication for user_id={post_info.get('author')}, telegram_id={telegram_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
            if post_info.get('is_posted', False):
                await callback.message.answer("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            if post_info.get('is_paid', False):
                await callback.message.answer("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
                return
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
            publish_result = await publish_post_now(post_info['id'])
            
            if 'error' in publish_result:
                logging.error(f"[publish_now_callback] Publication failed: {publish_result['error']}")
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_result['error']}")
                return
            
            logging.info(f"[publish_now_callback] Publication successful: {publish_result}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            tokens_added = publish_result.get('tokens_added', 0)
            author_level = publish_result.get('author_level', 1)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            success, channel_message_id = await publish_to_channel(post_info, callback.bot)
            if not success:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            await update_post_channel_info(post_info['id'], channel_message_id)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            queue_recalc_result = await recalculate_queue_after_immediate_publication()
            if 'error' in queue_recalc_result:
                logging.warning(f"[publish_now_callback] Queue recalculation failed: {queue_recalc_result['error']}")
            else:
                logging.info(f"[publish_now_callback] Queue recalculated: {queue_recalc_result.get('message', 'Success')}")
            
            logging.info(f"[publish_now_callback] Successfully published and paid post {post_info['id']}: level {author_level}, {tokens_added} tokens")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç–µ
            await send_publication_and_payment_notification(callback.bot, post_info.get('author'), post_info.get('content', ''), tokens_added, publish_result.get('author_balance', 'N/A'), channel_message_id)
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await callback.message.delete_reply_markup()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ—É –æ–± –∞–≤—Ç–æ—Ä–µ
            author_info = await get_user_info(post_info.get('author'))
            author_username = author_info.get('username', 'N/A')
            author_firstname = author_info.get('firstname', '')
            author_lastname = author_info.get('lastname', '')
            author_level = author_info.get('level', 'N/A')
            author_balance = author_info.get('balance', 'N/A')
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            admin_message_text = f"üöÄ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ–ø–ª–∞—á–µ–Ω</b>\n\n"
            admin_message_text += f"<b>–ê–≤—Ç–æ—Ä:</b> <code>{post_info['author']}</code> @{author_username}\n"
            admin_message_text += f"<b>–ò–º—è:</b> {author_firstname} {author_lastname}\n"
            admin_message_text += f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {author_level}\n"
            admin_message_text += f"<b>–ë–∞–ª–∞–Ω—Å:</b> {author_balance} —Ç.\n"
            admin_message_text += f"<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_info.get('content', '')[:100]}{'...' if len(post_info.get('content', '')) > 100 else ''}\n\n"
            admin_message_text += f"<b>–û–ø–ª–∞—Ç–∞:</b>\n"
            admin_message_text += f"<b>–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞:</b> {author_level}\n"
            admin_message_text += f"<b>–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ:</b> {tokens_added}\n"
            admin_message_text += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞:</b> {publish_result.get('author_balance', 'N/A')} —Ç.\n\n"
            admin_message_text += f"<b>ID –≤–æ–ø—Ä–æ—Å–∞:</b> {post_info['id']}\n"
            admin_message_text += f"<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_message_text += f"<b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
            admin_message_text = re.sub(r"#–Ω–µ–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", "#–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", admin_message_text)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ
            await callback.message.edit_text(
                text=admin_message_text,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logging.exception(f"[publish_now_callback] Exception processing immediate publication for user_id={post_info.get('author')}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

    @dp.callback_query(F.data.startswith(("pay_",)))
    async def pay_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–ø–ª–∞—Ç–∏—Ç—å' - –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∞–≤—Ç–æ—Ä–∞"""
        if not callback.message or not hasattr(callback.message, 'reply_to_message') or callback.message.reply_to_message is None:
            logging.error('pay_callback: reply_to_message is None')
            await callback.answer('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            return
        user_id = int(callback.data.split("_")[1])
        original_msg = callback.message.reply_to_message
        
        try:
            logging.info(f"[pay_callback] Processing payment for user_id={user_id}, telegram_id={original_msg.message_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –ø–æ telegram_id (ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            post_info = await get_post_by_telegram_id(original_msg.message_id)
            if 'error' in post_info:
                logging.error(f"[pay_callback] Post not found: {post_info['error']}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            logging.info(f"[pay_callback] Found post: {post_info}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            if post_info.get('is_paid', False):
                await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –≤—ã–ª–æ–∂–µ–Ω –≤ –∫–∞–Ω–∞–ª
            channel_message_id = post_info.get('channel_message_id')
            if not channel_message_id:
                await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –≤—ã–ª–æ–∂–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞
            author_id = post_info.get('author')
            if not author_id:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            author_info = await get_user_info(author_id)
            if 'error' in author_info:
                error_text = author_info.get('error', '')
                if '404' in error_text:
                    await callback.answer(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {author_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                else:
                    await callback.answer(f'‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ')
                return
            
            author_level = author_info.get('level', 1)
            logging.info(f"[pay_callback] Author level: {author_level}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ API
            payment_result = await process_post_payment(post_info['id'])
            
            if 'error' in payment_result:
                logging.error(f"[pay_callback] Payment processing failed: {payment_result['error']}")
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: {payment_result['error']}")
                return
            
            logging.info(f"[pay_callback] Payment processed successfully: {payment_result}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            tokens_added = payment_result.get('tokens_added', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ—É –æ–± –∞–≤—Ç–æ—Ä–µ
            author_info = await get_user_info(user_id)
            author_username = author_info.get('username', 'N/A')
            author_firstname = author_info.get('firstname', '')
            author_lastname = author_info.get('lastname', '')
            author_level = author_info.get('level', 'N/A')
            author_balance = author_info.get('balance', 'N/A')
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω —á–∞—Ç–∞
            admin_message_text = f"<b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ–ø–ª–∞—á–µ–Ω</b>\n\n"
            admin_message_text += f"<b>–ê–≤—Ç–æ—Ä:</b> {author_id}\n"
            admin_message_text += f"<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_info.get('content', '')[:100]}{'...' if len(post_info.get('content', '')) > 100 else ''}\n\n"
            admin_message_text += f"<b>–û–ø–ª–∞—Ç–∞:</b>\n"
            admin_message_text += f"<b>–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞:</b> {author_level}\n"
            admin_message_text += f"<b>–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ:</b> {tokens_added}\n"
            admin_message_text += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞:</b> {payment_result.get('author_balance', 'N/A')} —Ç.\n\n"
            admin_message_text += f"<b>ID –≤–æ–ø—Ä–æ—Å–∞:</b> {post_info['id']}\n"
            admin_message_text += f"<b>–í—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_message_text += f"<b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
            admin_message_text = re.sub(r"#–Ω–µ–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", "#–∑–∞–ø–æ—Å—Ç—á–µ–Ω–æ", admin_message_text)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ
            await callback.message.edit_text(
                text=admin_message_text,
                parse_mode="HTML"
            )
            
            await callback.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                f"üë§ –ê–≤—Ç–æ—Ä: {author_id}\n"
                f"üìä –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞: {author_level}\n"
                f"üí∞ –¢–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ: {tokens_added}\n"
                f"üìà –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞: {payment_result.get('author_balance', 'N/A')} —Ç.\n"
                f"üìù ID –≤–æ–ø—Ä–æ—Å–∞: {post_info['id']}\n"
                f"üìÖ –í—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã: {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"üëÆ –ê–¥–º–∏–Ω: {callback.from_user.username or callback.from_user.first_name}"
            )
            
            logging.info(f"[pay_callback] Successfully processed payment for post {post_info['id']}: level {author_level}, {tokens_added} tokens")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            
        except Exception as e:
            logging.exception(f"[pay_callback] Exception processing payment for user_id={user_id}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã")

    @dp.callback_query(F.data.startswith("set_theme_"))
    async def set_theme_callback(callback: types.CallbackQuery):
        # –ü–∞—Ä—Å–∏–º post_id –∏ —Ç–µ–º—É
        try:
            _, _, post_id, *theme_parts = callback.data.split('_')
            theme = '_'.join(theme_parts)
        except Exception:
            await callback.answer('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É')
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
        post_info = await get_post_by_telegram_id(int(post_id))
        if 'error' in post_info:
            await callback.answer('–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥ –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = post_info.get('content', '')
        hashtag_line = f"<i>#{theme}</i>\n\n"
        if not content.startswith(hashtag_line):
            new_content = hashtag_line + content
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API (PATCH)
            import aiohttp
            API_BASE = os.getenv('API_BASE', 'http://backend:8000/api/')
            API_URL = f"{API_BASE}ask-posts/{post_id}/"
            headers = {'Content-Type': 'application/json'}
            payload = {"content": new_content}
            async with aiohttp.ClientSession() as session:
                await session.patch(API_URL, json=payload, headers=headers)
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–º
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{post_id}")],
                [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_now_{post_id}")]
            ]
        )
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer(f"–¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: #{theme}")