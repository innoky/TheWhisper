from aiogram import types, F, Dispatcher
from aiogram.enums import ParseMode
from db.wapi import get_user_info, get_user_pseudo_names, update_user_info
import logging

def register_account_handlers(dp: Dispatcher):
    @dp.message(F.text == "/account")
    async def account_handler(message: types.Message):
        user_id = message.from_user.id
        current_username = message.from_user.username
        current_firstname = message.from_user.first_name
        current_lastname = message.from_user.last_name
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        if isinstance(user_info, dict) and user_info.get("error"):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            logging.info(f"[account_handler] User {user_id} not found, creating new user")
            from db.wapi import try_create_user
            create_result = await try_create_user(user_id, current_username, current_firstname, current_lastname)
            if isinstance(create_result, dict) and create_result.get("error"):
                await message.answer(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {create_result["error"]}')
                return
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await get_user_info(user_id)
            if isinstance(user_info, dict) and user_info.get("error"):
                await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {user_info["error"]}')
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        needs_update = False
        if (user_info.get('username') != current_username or 
            user_info.get('firstname') != current_firstname or 
            user_info.get('lastname') != current_lastname):
            needs_update = True
            logging.info(f"[account_handler] User data changed, updating user {user_id}")
            logging.info(f"[account_handler] Old: username={user_info.get('username')}, firstname={user_info.get('firstname')}, lastname={user_info.get('lastname')}")
            logging.info(f"[account_handler] New: username={current_username}, firstname={current_firstname}, lastname={current_lastname}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_result = await update_user_info(user_id, current_username, current_firstname, current_lastname)
            if not isinstance(update_result, dict) or not update_result.get("error"):
                logging.info(f"[account_handler] User data updated successfully")
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                user_info = await get_user_info(user_id)
                if isinstance(user_info, dict) and user_info.get("error"):
                    await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {user_info["error"]}')
                    return
            else:
                logging.error(f"[account_handler] Failed to update user data: {update_result}")
        else:
            logging.info(f"[account_handler] User data is up to date for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∫–æ–≤
        user_pseudos = await get_user_pseudo_names(user_id)
        if isinstance(user_pseudos, dict) and user_pseudos.get("error"):
            await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–æ–≤: {user_pseudos["error"]}')
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
        account_text = f"""
<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ ID: {user_info.get('id', 'N/A')}
‚Ä¢ –ò–º—è: {user_info.get('firstname', 'N/A')} {user_info.get('lastname', 'N/A')}
‚Ä¢ Username: @{user_info.get('username', 'N/A')}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_info.get('level', 1)}/10
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {user_info.get('balance', 0)} —Ç.
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user_info.get('is_banned', False) else '–ê–∫—Ç–∏–≤–µ–Ω'}

<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã ({len(user_pseudos)}):</b>
"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∏–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if user_pseudos:
            account_text += "\n<b>üìã –í–∞—à–∏ –Ω–∏–∫–Ω–µ–π–º—ã:</b>\n"
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏–∫–∞—Ö
            from db.wapi import get_all_pseudo_names
            all_pseudos = await get_all_pseudo_names()
            if not isinstance(all_pseudos, dict) or not all_pseudos.get("error"):
                pseudo_map = {p['id']: p for p in all_pseudos}
                total_spent = 0
                for pseudo_id in user_pseudos:
                    if pseudo_id in pseudo_map:
                        pseudo = pseudo_map[pseudo_id]
                        try:
                            price = float(pseudo.get('price', 0))
                        except (ValueError, TypeError):
                            price = 0.0
                        total_spent += price
                        account_text += f"‚Ä¢ <code>{pseudo['pseudo']}</code> (üí∞ {price} —Ç.)\n"
                
                account_text += f"\n<b>üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {total_spent} —Ç."
            else:
                account_text += "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏–∫–Ω–µ–π–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        else:
            account_text += "\n<blockquote>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /market –¥–ª—è –ø–æ–∫—É–ø–∫–∏!</blockquote>"
        
        await message.answer(account_text, parse_mode=ParseMode.HTML)

    @dp.message(F.text == "/help")
    async def help_handler(message: types.Message):
        help_text = """
<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /account ‚Äî –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ú–∞–≥–∞–∑–∏–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤:</b>
‚Ä¢ /market ‚Äî –ø–æ–∫—É–ø–∫–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

<b>–ü—Ä–µ–¥–ª–æ–∂–∫–∞ –ø–æ—Å—Ç–æ–≤:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –≤ —á–∞—Ç –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π

<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /account –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
"""
        await message.answer(help_text, parse_mode=ParseMode.HTML) 