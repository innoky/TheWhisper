from aiogram import types, F, Dispatcher
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode, ContentType
from datetime import datetime, timedelta, timezone
import os
import pytz
from datetime import time
from db.wapi import get_last_post, try_create_post, mark_post_as_posted, mark_post_as_rejected_by_telegram_id, get_post_by_telegram_id, process_post_payment, get_user_info, get_active_posts_count, publish_post_now, get_last_published_post_time, recalculate_queue_after_immediate_publication
from SugQueue import publish_to_channel, update_post_channel_info, send_publication_notification
import logging


ACTIVE_START_HOUR = 10  # 10:00
ACTIVE_END_HOUR = 1     # 01:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
POST_INTERVAL_MINUTES = 30
BOT_NAME = os.getenv("BOT_NAME")

async def send_submission_notification(bot, user_id: int, post_content: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = f"üì§ <b>–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!</b>\n\n"
        notification_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>\n"
        notification_text += f"<i>¬´{post_content[:150]}{'...' if len(post_content) > 150 else ''}¬ª</i>\n\n"
        notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        notification_text += f"üìã <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
        notification_text += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –ø–æ—Å—Ç\n"
        notification_text += f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏\n"
        notification_text += f"‚Ä¢ –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ\n\n"
        notification_text += f"‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!</b>\n\n"
        notification_text += f"üí° <b>–ü–æ–∫–∞ –∂–¥–µ—Ç–µ:</b>\n"
        notification_text += f"‚Ä¢ –ò–∑—É—á–∏—Ç–µ /help - –ø—Ä–∞–≤–∏–ª–∞ –∏ –∫–æ–º–∞–Ω–¥—ã\n"
        notification_text += f"‚Ä¢ –ü–æ—Å–µ—Ç–∏—Ç–µ /market - –º–∞–≥–∞–∑–∏–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤\n"
        notification_text += f"‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML"
        )
        logging.info(f"[send_submission_notification] Beautiful submission notification sent to user {user_id}")
        
    except Exception as e:
        logging.error(f"[send_submission_notification] Error sending submission notification: {e}")


async def send_rejection_notification(bot, user_id: int, post_content: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        notification_text = f"‚ùå <b>–í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
        notification_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>\n"
        notification_text += f"<i>¬´{post_content[:150]}{'...' if len(post_content) > 150 else ''}¬ª</i>\n\n"
        notification_text += f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
        notification_text += f"‚Ä¢ –ü–æ—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
        notification_text += f"‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞\n"
        notification_text += f"‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        notification_text += f"üîÑ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        notification_text += f"‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞\n"
        notification_text += f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ\n"
        notification_text += f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n\n"
        notification_text += f"üìö <b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        notification_text += f"‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        notification_text += f"‚Ä¢ /market - –∫—É–ø–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã\n\n"
        notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML"
        )
        logging.info(f"[send_rejection_notification] Beautiful rejection notification sent to user {user_id}")
        
    except Exception as e:
        logging.error(f"[send_rejection_notification] Error sending rejection notification: {e}")


async def send_approval_notification(bot, user_id: int, post_content: str, scheduled_time: datetime, queue_position: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = f"üéâ <b>–í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
        notification_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>\n"
        notification_text += f"<i>¬´{post_content[:150]}{'...' if len(post_content) > 150 else ''}¬ª</i>\n\n"
        
        scheduled_time_str = scheduled_time.strftime("%d.%m.%Y –≤ %H:%M")
        time_diff = (scheduled_time - datetime.now(timezone(timedelta(hours=3)))).total_seconds() / 60
        
        if queue_position and queue_position > 1:
            notification_text += f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n"
            notification_text += f"üìç <b>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:</b> #{queue_position}\n"
            notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
            if time_diff > 0:
                notification_text += f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> {time_diff:.0f} –º–∏–Ω—É—Ç\n"
            else:
                notification_text += f"üöÄ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è:</b> –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
        else:
            if time_diff > 0:
                notification_text += f"‚è∞ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω\n"
                notification_text += f"üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
                notification_text += f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> {time_diff:.0f} –º–∏–Ω—É—Ç\n"
            else:
                notification_text += f"üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
                notification_text += f"üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
        
        notification_text += f"\nüí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞ –ø–æ—Å—Ç!\n"
        notification_text += f"üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ /market\n\n"
        notification_text += f"üéØ <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML"
        )
        logging.info(f"[send_approval_notification] Beautiful approval notification sent to user {user_id}")
        
    except Exception as e:
        logging.error(f"[send_approval_notification] Error sending approval notification: {e}")


async def send_publication_and_payment_notification(bot, user_id: int, post_content: str, tokens_added: int, new_balance: str, channel_message_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç–µ"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
        channel_id = os.getenv("CHANNEL_ID")
        if not channel_id:
            logging.error(f"[send_publication_and_payment_notification] CHANNEL_ID not set")
            return
            
        if channel_id.startswith('-100'):
            channel_id = channel_id[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100 –¥–ª—è —Å—Å—ã–ª–∫–∏
        
        post_link = f"https://t.me/c/{channel_id}/{channel_message_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = f"üéâ <b>–í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ–ø–ª–∞—á–µ–Ω!</b>\n\n"
        notification_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
        notification_text += f"<i>¬´{post_content[:150]}{'...' if len(post_content) > 150 else ''}¬ª</i>\n\n"
        notification_text += f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:</b>\n"
        notification_text += f"<a href=\"{post_link}\">üì± –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ</a>\n\n"
        notification_text += f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ—Å—Ç:</b>\n"
        notification_text += f"‚ûï <b>–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> +{tokens_added} —Ç.\n"
        notification_text += f"üìä <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} —Ç.\n\n"
        notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        notification_text += f"üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
        notification_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ /market\n"
        notification_text += f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤\n"
        notification_text += f"‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
        notification_text += f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!</b> üåü"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=notification_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"[send_publication_and_payment_notification] Beautiful combined notification sent to user {user_id}")
        
    except Exception as e:
        logging.error(f"[send_publication_and_payment_notification] Error sending combined notification: {e}")


def save_post_to_db(user_id: int, text: str):
    # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    print(f"[DB] Saved post from {user_id}: {text[:30]}...")


def get_content_type_and_text(message: types.Message) -> tuple[str, str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î
    """
    if message.text:
        return "text", message.text.strip()
    elif message.photo:
        caption = message.caption or ""
        return "photo", f"[PHOTO] {caption}".strip()
    elif message.animation:
        caption = message.caption or ""
        return "gif", f"[GIF] {caption}".strip()
    elif message.sticker:
        return "sticker", "[STICKER]"
    elif message.video:
        caption = message.caption or ""
        return "video", f"[VIDEO] {caption}".strip()
    elif message.voice:
        return "voice", "[VOICE]"
    elif message.audio:
        caption = message.caption or ""
        return "audio", f"[AUDIO] {caption}".strip()
    elif message.document:
        caption = message.caption or ""
        return "document", f"[DOCUMENT] {caption}".strip()
    else:
        return "unknown", "[UNKNOWN CONTENT]"


def register_suggest_handler(dp: Dispatcher):
    @dp.message()
    async def suggest_handler(message: types.Message, state: FSMContext):
        if message.from_user and message.from_user.first_name == "Telegram":
            comment_url = f"https://t.me/{BOT_NAME}?start={message.message_id}"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å", url=comment_url)]
                ]
            )
            await message.reply(
                "üí¨ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É —Ç—É—Ç:</b>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        elif message.chat.type == 'private':
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î
            content_type, post_content = get_content_type_and_text(message)
            
            msg = await message.copy_to(os.getenv('OFFERS_CHAT_ID'))
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")],
                    [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"approve_{message.from_user.id}")]
                ]
            )
            await message.bot.send_message(
                chat_id=os.getenv("OFFERS_CHAT_ID"),
                text=(
                    f"id: {message.from_user.id}\n"
                    f"username: @{message.from_user.username or 'N/A'}\n"
                    f"content_type: {content_type}\n\n"
                ),
                reply_to_message_id=msg.message_id,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
            await send_submission_notification(message.bot, message.from_user.id, post_content)

    @dp.callback_query(F.data.startswith(("reject_",)))
    async def reject_callback(callback: types.CallbackQuery):
        user_id = int(callback.data.split("_")[1])
        original_msg = callback.message.reply_to_message
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î
        content_type, post_content = get_content_type_and_text(original_msg)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
        post_info = await get_post_by_telegram_id(original_msg.message_id)
        
        if 'error' not in post_info:
            # –ü–æ—Å—Ç –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            result = await mark_post_as_rejected_by_telegram_id(original_msg.message_id)
            logging.info(f"[reject_callback] Post removed from queue: {result}")
        else:
            # –ü–æ—Å—Ç–∞ –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª–æ–Ω—è–µ–º
            logging.info(f"[reject_callback] Post not in queue, just rejecting")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω —á–∞—Ç–∞
        admin_message_text = f"‚ùå <b>–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!</b>\n\n"
        admin_message_text += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {user_id}\n"
        admin_message_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_content[:100]}{'...' if len(post_content) > 100 else ''}\n"
        admin_message_text += f"üìÑ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content_type}\n\n"
        admin_message_text += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
        admin_message_text += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ
        await callback.message.edit_text(
            text=admin_message_text,
            parse_mode="HTML"
        )
        
        await callback.answer("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await send_rejection_notification(callback.bot, user_id, post_content)

    @dp.callback_query(F.data.startswith(("approve_",)))
    async def approve_callback(callback: types.CallbackQuery):
        user_id = int(callback.data.split("_")[1])
        original_msg = callback.message.reply_to_message
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(timezone(timedelta(hours=3)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
        active_posts_count = await get_active_posts_count()
        logging.info(f"[approve_callback] Active posts in queue: {active_posts_count}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        if active_posts_count > 0:
            logging.info(f"[approve_callback] Queue exists ({active_posts_count} posts), calculating from last queued post")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            last_post_data = await get_last_post()
            last_post_time_str = last_post_data.get('posted_at')
            
            try:
                if last_post_time_str and ('+' in last_post_time_str or 'Z' in last_post_time_str):
                    last_post_dt = datetime.strptime(last_post_time_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                    last_post_dt = last_post_dt.astimezone(moscow_tz)
                else:
                    last_post_dt = moscow_tz.localize(datetime.strptime(last_post_time_str, "%Y-%m-%d %H:%M:%S")) if last_post_time_str else now
            except ValueError as e:
                last_post_dt = now
                
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
            scheduled_time = last_post_dt + timedelta(minutes=POST_INTERVAL_MINUTES)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
            if scheduled_time.hour < ACTIVE_START_HOUR and scheduled_time.hour >= ACTIVE_END_HOUR:
                next_day = now.date() + timedelta(days=1)
                scheduled_time = moscow_tz.localize(datetime.combine(next_day, time(hour=ACTIVE_START_HOUR, minute=0)))
        else:
            # –û—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
            last_published_data = await get_last_published_post_time()
            
            if 'error' in last_published_data:
                # –ü–æ—Å—Ç–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç, –ø—É–±–ª–∏–∫—É–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
                logging.info(f"[approve_callback] No published posts exist, publishing immediately")
                scheduled_time = now
            else:
                # –ï—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ channel_posted_at
                last_post_time_str = last_published_data.get('channel_posted_at')
                
                logging.info(f"[approve_callback] Last published post channel_posted_at: {last_post_time_str}")
                
                try:
                    if last_post_time_str and ('+' in last_post_time_str or 'Z' in last_post_time_str):
                        last_post_dt = datetime.strptime(last_post_time_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                        last_post_dt = last_post_dt.astimezone(moscow_tz)
                    else:
                        last_post_dt = moscow_tz.localize(datetime.strptime(last_post_time_str, "%Y-%m-%d %H:%M:%S"))
                    
                    time_since_last_post = (now - last_post_dt).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
                    logging.info(f"[approve_callback] Time since last published post: {time_since_last_post:.1f} minutes")
                    
                    if time_since_last_post >= POST_INTERVAL_MINUTES:
                        # –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç, –ø—É–±–ª–∏–∫—É–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
                        logging.info(f"[approve_callback] More than {POST_INTERVAL_MINUTES} minutes passed, publishing immediately")
                        scheduled_time = now
                    else:
                        # –ü—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 30 –º–∏–Ω—É—Ç, –∂–¥–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                        remaining_minutes = POST_INTERVAL_MINUTES - time_since_last_post
                        scheduled_time = now + timedelta(minutes=remaining_minutes)
                        logging.info(f"[approve_callback] Less than {POST_INTERVAL_MINUTES} minutes passed, waiting {remaining_minutes:.1f} more minutes")
                        
                except ValueError as e:
                    logging.error(f"[approve_callback] Error parsing last published post time: {e}")
                    scheduled_time = now
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î
        content_type, post_content = get_content_type_and_text(original_msg)
        
        if not post_content:
            logging.error(f"[approve_callback] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç: –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π. user_id={user_id}, telegram_id={original_msg.message_id}")
            await callback.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ –ø—É—Å—Ç–æ–π!")
            return
        
        logging.info(f"[approve_callback] try_create_post payload: author_id={user_id}, content={post_content}, telegram_id={original_msg.message_id}, post_time={scheduled_time}")
        create_result = await try_create_post(author_id=user_id, content=post_content, telegram_id=original_msg.message_id, post_time=scheduled_time)
        
        if 'error' in create_result:
            logging.error(f"[approve_callback] Error creating post: {create_result['error']}")
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞!")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        scheduled_time_str = scheduled_time.strftime("%d.%m.%Y –≤ %H:%M")
        time_diff = (scheduled_time - now).total_seconds() / 60
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ø–∞–ø–∞
        if active_posts_count > 0:
            status_message = f"üìã –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
            status_message += f"üìç –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {active_posts_count + 1}\n"
            status_message += f"‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time_str}\n"
            if time_diff > 0:
                status_message += f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {time_diff:.0f} –º–∏–Ω—É—Ç\n"
            else:
                status_message += f"üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
        else:
            if time_diff > 0:
                status_message = f"‚è∞ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
                status_message += f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time_str}\n"
                status_message += f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {time_diff:.0f} –º–∏–Ω—É—Ç\n"
            else:
                status_message = f"üöÄ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ!\n\n"
                status_message += f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time_str}\n"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")],
                [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_now_{user_id}")]
            ]
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω —á–∞—Ç–∞
        admin_message_text = f"‚úÖ <b>–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
        admin_message_text += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {user_id}\n"
        admin_message_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_content[:100]}{'...' if len(post_content) > 100 else ''}\n"
        admin_message_text += f"üìÑ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content_type}\n\n"
        
        if active_posts_count > 0:
            admin_message_text += f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n"
            admin_message_text += f"üìç <b>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {active_posts_count + 1}\n"
            admin_message_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
            if time_diff > 0:
                admin_message_text += f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> {time_diff:.0f} –º–∏–Ω—É—Ç\n"
            else:
                admin_message_text += f"üöÄ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è:</b> –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
        else:
            if time_diff > 0:
                admin_message_text += f"‚è∞ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω\n"
                admin_message_text += f"üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
                admin_message_text += f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> {time_diff:.0f} –º–∏–Ω—É—Ç\n"
            else:
                admin_message_text += f"üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> –ë—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
                admin_message_text += f"üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {scheduled_time_str}\n"
        
        admin_message_text += f"\n‚è∞ <b>–í—Ä–µ–º—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
        admin_message_text += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ
        await callback.message.edit_text(
            text=admin_message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer(status_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        queue_position = active_posts_count + 1 if active_posts_count > 0 else None
        await send_approval_notification(callback.bot, user_id, post_content, scheduled_time, queue_position)

    @dp.callback_query(F.data.startswith(("publish_now_",)))
    async def publish_now_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å' - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ"""
        user_id = int(callback.data.split("_")[2])
        original_msg = callback.message.reply_to_message
        
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
        await callback.answer("üöÄ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç...")
        
        try:
            logging.info(f"[publish_now_callback] Processing immediate publication for user_id={user_id}, telegram_id={original_msg.message_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –ø–æ telegram_id
            post_info = await get_post_by_telegram_id(original_msg.message_id)
            if 'error' in post_info:
                logging.error(f"[publish_now_callback] Post not found: {post_info['error']}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            logging.info(f"[publish_now_callback] Found post: {post_info}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
            if post_info.get('is_posted', False):
                await callback.message.answer("‚ùå –ü–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            if post_info.get('is_paid', False):
                await callback.message.answer("‚ùå –ü–æ—Å—Ç —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
                return
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
            publish_result = await publish_post_now(post_info['id'])
            
            if 'error' in publish_result:
                logging.error(f"[publish_now_callback] Publication failed: {publish_result['error']}")
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_result['error']}")
                return
            
            logging.info(f"[publish_now_callback] Publication successful: {publish_result}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            tokens_added = publish_result.get('tokens_added', 0)
            author_level = publish_result.get('author_level', 1)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            success, channel_message_id = await publish_to_channel(post_info, callback.bot)
            if not success:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            await update_post_channel_info(post_info['id'], channel_message_id)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            queue_recalc_result = await recalculate_queue_after_immediate_publication()
            if 'error' in queue_recalc_result:
                logging.warning(f"[publish_now_callback] Queue recalculation failed: {queue_recalc_result['error']}")
            else:
                logging.info(f"[publish_now_callback] Queue recalculated: {queue_recalc_result.get('message', 'Success')}")
            
            logging.info(f"[publish_now_callback] Successfully published and paid post {post_info['id']}: level {author_level}, {tokens_added} tokens")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø–ª–∞—Ç–µ
            await send_publication_and_payment_notification(callback.bot, user_id, post_info.get('content', ''), tokens_added, publish_result.get('author_balance', 'N/A'), channel_message_id)
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await callback.message.delete_reply_markup()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω —á–∞—Ç–∞
            admin_message_text = f"üöÄ <b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ–ø–ª–∞—á–µ–Ω!</b>\n\n"
            admin_message_text += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {user_id}\n"
            admin_message_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_info.get('content', '')[:100]}{'...' if len(post_info.get('content', '')) > 100 else ''}\n\n"
            admin_message_text += f"üí∞ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
            admin_message_text += f"üìä <b>–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞:</b> {author_level}\n"
            admin_message_text += f"‚ûï <b>–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ:</b> {tokens_added}\n"
            admin_message_text += f"üìà <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞:</b> {publish_result.get('author_balance', 'N/A')} —Ç.\n\n"
            admin_message_text += f"üìù <b>ID –ø–æ—Å—Ç–∞:</b> {post_info['id']}\n"
            admin_message_text += f"üìÖ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_message_text += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ
            await callback.message.edit_text(
                text=admin_message_text,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logging.exception(f"[publish_now_callback] Exception processing immediate publication for user_id={user_id}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

    @dp.callback_query(F.data.startswith(("pay_",)))
    async def pay_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–ø–ª–∞—Ç–∏—Ç—å' - –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∞–≤—Ç–æ—Ä–∞"""
        user_id = int(callback.data.split("_")[1])
        original_msg = callback.message.reply_to_message
        
        try:
            logging.info(f"[pay_callback] Processing payment for user_id={user_id}, telegram_id={original_msg.message_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –ø–æ telegram_id (ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            post_info = await get_post_by_telegram_id(original_msg.message_id)
            if 'error' in post_info:
                logging.error(f"[pay_callback] Post not found: {post_info['error']}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            logging.info(f"[pay_callback] Found post: {post_info}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            if post_info.get('is_paid', False):
                await callback.answer("‚ùå –ü–æ—Å—Ç —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –≤—ã–ª–æ–∂–µ–Ω –≤ –∫–∞–Ω–∞–ª
            channel_message_id = post_info.get('channel_message_id')
            if not channel_message_id:
                await callback.answer("‚ùå –ü–æ—Å—Ç –µ—â–µ –Ω–µ –≤—ã–ª–æ–∂–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –ø–æ—Å—Ç–∞
            author_id = post_info.get('author')
            if not author_id:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: —É –ø–æ—Å—Ç–∞ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            author_info = await get_user_info(author_id)
            if 'error' in author_info:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ")
                return
            
            author_level = author_info.get('level', 1)
            logging.info(f"[pay_callback] Author level: {author_level}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ API
            payment_result = await process_post_payment(post_info['id'])
            
            if 'error' in payment_result:
                logging.error(f"[pay_callback] Payment processing failed: {payment_result['error']}")
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: {payment_result['error']}")
                return
            
            logging.info(f"[pay_callback] Payment processed successfully: {payment_result}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            tokens_added = payment_result.get('tokens_added', 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω —á–∞—Ç–∞
            admin_message_text = f"üí∞ <b>–ü–æ—Å—Ç –æ–ø–ª–∞—á–µ–Ω!</b>\n\n"
            admin_message_text += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author_id}\n"
            admin_message_text += f"üìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> {post_info.get('content', '')[:100]}{'...' if len(post_info.get('content', '')) > 100 else ''}\n\n"
            admin_message_text += f"üí∞ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
            admin_message_text += f"üìä <b>–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞:</b> {author_level}\n"
            admin_message_text += f"‚ûï <b>–¢–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ:</b> {tokens_added}\n"
            admin_message_text += f"üìà <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞:</b> {payment_result.get('author_balance', 'N/A')} —Ç.\n\n"
            admin_message_text += f"üìù <b>ID –ø–æ—Å—Ç–∞:</b> {post_info['id']}\n"
            admin_message_text += f"üìÖ <b>–í—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_message_text += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ
            await callback.message.edit_text(
                text=admin_message_text,
                parse_mode="HTML"
            )
            
            await callback.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                f"üë§ –ê–≤—Ç–æ—Ä: {author_id}\n"
                f"üìä –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∞: {author_level}\n"
                f"üí∞ –¢–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ: {tokens_added}\n"
                f"üìà –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞: {payment_result.get('author_balance', 'N/A')} —Ç.\n"
                f"üìù ID –ø–æ—Å—Ç–∞: {post_info['id']}\n"
                f"üìÖ –í—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã: {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"üëÆ –ê–¥–º–∏–Ω: {callback.from_user.username or callback.from_user.first_name}"
            )
            
            logging.info(f"[pay_callback] Successfully processed payment for post {post_info['id']}: level {author_level}, {tokens_added} tokens")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            
        except Exception as e:
            logging.exception(f"[pay_callback] Exception processing payment for user_id={user_id}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã")