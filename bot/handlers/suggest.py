from aiogram import types, F, Dispatcher
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode, ContentType
from datetime import datetime, timedelta
import os
import pytz
from datetime import time
from db.wapi import get_last_post, try_create_post, mark_post_as_posted, mark_post_as_rejected


ACTIVE_START_HOUR = 10  # 10:00
ACTIVE_END_HOUR = 1     # 01:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
POST_INTERVAL_MINUTES = 30
BOT_NAME = os.getenv("BOT_NAME")

def save_post_to_db(user_id: int, text: str):
    # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    print(f"[DB] Saved post from {user_id}: {text[:30]}...")


def register_suggest_handler(dp: Dispatcher):
    @dp.message()
    async def suggest_handler(message: types.Message, state: FSMContext):
      
        if message.from_user and message.from_user.first_name == "Telegram":
            comment_url = f"https://t.me/{BOT_NAME}?start={message.message_id}"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å", url=comment_url)]
                ]
            )
            await message.reply(
                "üí¨ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É —Ç—É—Ç:</b>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            ) 

        elif message.chat.type == 'private':
            msg = await message.copy_to(os.getenv('OFFERS_CHAT_ID'))
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")],
                    [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"approve_{message.from_user.id}")],
                    [InlineKeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{message.from_user.id}")]
                ]
            )

            await message.bot.send_message(
                chat_id=os.getenv("OFFERS_CHAT_ID"),
                text=(
                    f"id: {message.from_user.id}\n"
                    f"username: @{message.from_user.username or 'N/A'}\n\n"
                ),
                reply_to_message_id=msg.message_id,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )

    @dp.callback_query(F.data.startswith(("reject_",)))
    async def reject_callback(callback: types.CallbackQuery):
       
        result = await mark_post_as_rejected(callback.message.reply_to_message.message_id)

        print("RESUUUUUULTTTT",result)
        await callback.message.delete_reply_markup()
    @dp.callback_query(F.data.startswith(("approve_",)))
    async def approve_callback(callback: types.CallbackQuery):
        user_id = int(callback.data.split("_")[1])
        original_msg = callback.message.reply_to_message
       

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(moscow_tz)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏ –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        last_post_data = await get_last_post()
        print(last_post_data)
        last_post_time_str = last_post_data['posted_at']
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
        try:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO —Å –∑–æ–Ω–æ–π (2025-06-26T12:27:24+0000)
            if '+' in last_post_time_str or 'Z' in last_post_time_str:
                last_post_dt = datetime.strptime(last_post_time_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                last_post_dt = last_post_dt.astimezone(moscow_tz)
            else:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –∑–æ–Ω—ã
                last_post_dt = moscow_tz.localize(datetime.strptime(last_post_time_str, "%Y-%m-%d %H:%M:%S"))
        except ValueError as e:
            print(f"Error parsing datetime: {e}")
            last_post_dt = now  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        print(f"Last post time from DB: {last_post_dt}")
        
        delta = now - last_post_dt
        print(delta)
        is_night = now.hour < ACTIVE_START_HOUR and now.hour >= 0
        is_daytime = ACTIVE_START_HOUR <= now.hour or is_night
        print(is_night,is_daytime)
        def next_post_time():
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã."""
            next_time = last_post_dt + timedelta(minutes=POST_INTERVAL_MINUTES)
            print("NEXT TIME:", next_time)
            if (next_time.hour <= ACTIVE_START_HOUR) and (next_time.hour >= ACTIVE_END_HOUR):
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–æ
                next_day = now.date() + timedelta(days=1)
                return moscow_tz.localize(datetime.combine(
                    next_day,
                    time(hour=ACTIVE_START_HOUR, minute=0)
                ))
            return next_time

        
        caption_or_text = original_msg.text or original_msg.caption

        scheduled_time = next_post_time()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        if caption_or_text:
            await try_create_post(author_id=user_id, content=caption_or_text, telegram_id = original_msg.message_id, post_time=scheduled_time)
        
        keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")],
                                      [InlineKeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{user_id}")]
                ]
            )
        await callback.message.edit_reply_markup(reply_markup=keyboard)