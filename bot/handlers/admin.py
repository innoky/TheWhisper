from aiogram import types, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from db.wapi import ban_user, unban_user, add_pseudo_name, add_balance, set_balance, get_all_pseudo_names, deactivate_pseudo_name, set_user_level, get_user_info, get_active_posts_count, get_recent_posts, get_all_users, get_queue_info, recalculate_queue_after_immediate_publication, get_user_pseudo_names_full, get_comments_count, get_comments_for_user_posts, get_post_info
import re
from aiogram.methods import EditMessageReplyMarkup
import aiohttp
import logging
from datetime import datetime, timezone, timedelta
import os
import difflib
from aiogram.utils.formatting import ExpandableBlockQuote, Bold, Text, Italic, TextLink, Underline, Code, Pre, BlockQuote
from collections import Counter

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ suggest
POST_INTERVAL_MINUTES = 30

async def format_queue_message(posts):
    if not posts:
        return Text("<b>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</b>")
    blocks = []
    offers_chat_id = os.getenv("OFFERS_CHAT_ID", "")
    if offers_chat_id and str(offers_chat_id).startswith("-100"):
        offers_chat_id = str(offers_chat_id)[4:]
    for i, post in enumerate(posts, 1):
        author_id = post.get('author', 'N/A')
        username = post.get('author_username', None)
        if not username or username == 'N/A':
            if author_id != 'N/A':
                user_info = await get_user_info(author_id)
                username = user_info.get('username', 'N/A') if user_info and not user_info.get('error') else 'N/A'
            else:
                username = 'N/A'
        content = post.get('content', '')[:100]
        post_id = post.get('id', 'N/A')
        telegram_id = post.get('telegram_id')
        msg_link = None
        if offers_chat_id and telegram_id:
            msg_link = f"https://t.me/c/{offers_chat_id}/{telegram_id}"
        blocks.append(
            Bold(f"#{i}") + Text(": ") +
            (TextLink(Bold(f"ID {author_id}"), url=msg_link) if msg_link else Bold(f"ID {author_id}")) +
            Text(" | ") + Italic(f"@{username}") + Text("\n") +
            Text(f"{content}...") + Text("\n") +
            Code(f"ID –ø–æ—Å—Ç–∞: {post_id}") + Text("\n") +
            (Text("–ü–æ—Å—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ: ") + TextLink(f"{telegram_id}", url=msg_link) if msg_link else Text("–ü–æ—Å—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–µ: N/A")) + Text("\n\n")
        )
    return ExpandableBlockQuote(*blocks)

async def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        logging.info(f"[is_admin] Checking admin status for user {user_id}")
        user_info = await get_user_info(user_id)
        logging.info(f"[is_admin] User info for {user_id}: {user_info}")
        
        if 'error' in user_info:
            logging.warning(f"[is_admin] Error getting user info for {user_id}: {user_info['error']}")
            return False
        
        is_admin_status = user_info.get('is_admin', False)
        logging.info(f"[is_admin] User {user_id} admin status: {is_admin_status}")
        return bool(is_admin_status)
    except Exception as e:
        logging.error(f"[is_admin] Exception checking admin status for {user_id}: {e}")
        return False

def register_admin_handlers(dp: Dispatcher):
    @dp.callback_query(F.data.startswith("ban_"))
    async def handle_ban(callback: types.CallbackQuery):
        if not callback.data:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∞")
            return
        user_id = int(callback.data.replace("ban_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if 'error' not in user_info:
            username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω
        result = await ban_user(user_id=user_id)
        
        msg = callback.message
        if isinstance(msg, types.Message):
            await msg.edit_reply_markup(reply_markup=None)
        elif msg is not None and getattr(msg, "chat", None) is not None and getattr(msg, "message_id", None) is not None:
            chat_id = msg.chat.id if getattr(msg, 'chat', None) is not None else None
            message_id = msg.message_id if getattr(msg, 'message_id', None) is not None else None
            if chat_id is not None and message_id is not None:
                await callback.bot(EditMessageReplyMarkup(chat_id=chat_id, message_id=message_id, reply_markup=None))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'error' in result:
            ban_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            ban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            ban_message += f"üö´ <b>–û—à–∏–±–∫–∞:</b> {result['error']}"
        else:
            ban_message = f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!</b>\n\n"
            ban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            ban_message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = callback.from_user.username if callback.from_user and getattr(callback.from_user, 'username', None) else None
            if not admin_name:
                admin_name = callback.from_user.first_name if callback.from_user and getattr(callback.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            ban_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!", show_alert=True)
    
    @dp.message(Command("unban"))
    async def unban_handler(message: types.Message):
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if 'error' not in user_info:
            username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–∞–Ω
        result = await unban_user(user_id=user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'error' in result:
            unban_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            unban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            unban_message += f"üö´ <b>–û—à–∏–±–∫–∞:</b> {result['error']}"
        else:
            unban_message = f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            unban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            unban_message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            unban_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        
        await message.answer(unban_message, parse_mode="HTML")

    @dp.message(Command("levelup"))
    async def levelup_handler(message: types.Message):
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /levelup &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /levelup &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        current_level = int(user_info.get('level', 1))
        new_level = min(current_level + 1, 10)  # –ù–µ –±–æ–ª—å—à–µ 10
        
        if new_level == current_level:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (10)")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        result = await set_user_level(user_id, new_level)
        if 'error' in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {result['error']}", parse_mode='HTML')
            return
        
        await message.answer(f"<b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–≤—ã—à–µ–Ω —Å {current_level} –¥–æ {new_level}</b>", parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!</b>\n\n"
                         f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                         f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}\n\n"
                         f"–¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤",
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.warning(f"Could not send levelup notification to user {user_id}: {e}")

    @dp.message(Command("leveldown"))
    async def leveldown_handler(message: types.Message):
        """–ü–æ–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /leveldown &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /leveldown &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        current_level = int(user_info.get('level', 1))
        new_level = max(current_level - 1, 1)  # –ù–µ –º–µ–Ω—å—à–µ 1
        
        if new_level == current_level:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (1)")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        result = await set_user_level(user_id, new_level)
        if 'error' in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {result['error']}", parse_mode='HTML')
            return
        
        await message.answer(f"<b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–Ω–∏–∂–µ–Ω —Å {current_level} –¥–æ {new_level}</b>", parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω!</b>\n\n"
                         f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                         f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}\n\n"
                         f"–¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤",
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.warning(f"Could not send leveldown notification to user {user_id}: {e}")

    @dp.message(Command("addpseudo"))
    async def addpseudo_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpseudo "–ù–∏–∫–Ω–µ–π–º" —Ü–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /addpseudo "–Ø–¥–µ—Ä–Ω—ã–π —à–µ–ø–æ—Ç" 150', parse_mode='HTML')
            return
        pattern = r'^/addpseudo\s+"([^"]+)"\s+(\d+(?:\.\d+)?)'
        match = re.match(pattern, message.text)
        if not match:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpseudo "–ù–∏–∫–Ω–µ–π–º" —Ü–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /addpseudo "–Ø–¥–µ—Ä–Ω—ã–π —à–µ–ø–æ—Ç" 150', parse_mode='HTML')
            return
        nickname = match.group(1)
        price = float(match.group(2))
        
        result = await add_pseudo_name(nickname, price)
        
        if 'id' in result:
            pseudo_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–¶–µ–Ω–∞:</b> {price:.2f} —Ç.\n"
            pseudo_message += f"<b>ID:</b> {result['id']}\n"
            pseudo_message += f"<b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
            pseudo_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            pseudo_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        elif 'pseudo' in result and 'unique' in str(result['pseudo']):
            pseudo_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–û—à–∏–±–∫–∞:</b> –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            pseudo_message += f"<b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥–æ–π /allpseudos"
        else:
            pseudo_message = f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–¶–µ–Ω–∞:</b> {price:.2f} —Ç.\n"
            pseudo_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(pseudo_message, parse_mode="HTML")

    @dp.message(Command("addbalance"))
    async def addbalance_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        user_id, amount = parts[1], parts[2]
        if not user_id.isdigit():
            await message.answer('user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        try:
            amount = float(amount)
        except ValueError:
            await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        old_balance = float(user_info.get('balance', 0))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await add_balance(user_id, amount)
        
        if 'balance' in result:
            new_balance = float(result["balance"])
            balance_message = f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {old_balance} —Ç.\n"
            balance_message += f"<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> +{amount} —Ç.\n"
            balance_message += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['balance']} —Ç.\n"
            balance_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            balance_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        else:
            balance_message = f"<b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—É–º–º–∞:</b> {amount} —Ç.\n"
            balance_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(balance_message, parse_mode="HTML")

    @dp.message(Command("setbalance"))
    async def setbalance_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        user_id, amount = parts[1], parts[2]
        if not user_id.isdigit():
            await message.answer('user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        try:
            amount = float(amount)
        except ValueError:
            await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        old_balance = float(user_info.get('balance', 0))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await set_balance(user_id, amount)
        
        if 'balance' in result:
            balance_message = f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {old_balance} —Ç.\n"
            balance_message += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['balance']} —Ç.\n"
            balance_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            balance_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        else:
            balance_message = f"<b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—É–º–º–∞:</b> {amount} —Ç.\n"
            balance_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(balance_message, parse_mode="HTML")

    @dp.message(Command("allpseudos"))
    async def allpseudos_handler(message: types.Message):
        pseudos = await get_all_pseudo_names()
        if isinstance(pseudos, dict) and pseudos.get("error"):
            await message.answer(f'<b>–û—à–∏–±–∫–∞:</b> {pseudos}', parse_mode='HTML')
            return
        if not pseudos:
            await message.answer('<b>–ù–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</b>', parse_mode='HTML')
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_count = len(pseudos)
        available_count = sum(1 for p in pseudos if p.get('is_available', False))
        unavailable_count = total_count - available_count
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        header = f"<b>–í—Å–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã ({total_count})</b>\n\n"
        header += f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        header += f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
        header += f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {unavailable_count}\n\n"
        header += f"<b>–°–ø–∏—Å–æ–∫:</b>\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
        lines = []
        for p in pseudos:
            status_icon = "‚úÖ" if p.get('is_available', False) else "‚ùå"
            status_text = "–î–æ—Å—Ç—É–ø–µ–Ω" if p.get('is_available', False) else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            lines.append(f"{status_icon} <b>ID {p['id']}:</b> \"{p['pseudo']}\" | {p['price']} —Ç. | {status_text}")
        
        text = header + '\n'.join(lines)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 4096:
            parts = []
            current_part = ""
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    parts.append(header + current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            if current_part:
                parts.append(header + current_part)
            
            for i, part in enumerate(parts, 1):
                await message.answer(f"{part}\n\nüìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i} –∏–∑ {len(parts)}</b>", parse_mode='HTML')
        else:
            await message.answer(text, parse_mode='HTML')

    @dp.message(Command("deactivate"))
    async def deactivate_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deactivate pseudo_id', parse_mode='HTML')
            return
        parts = message.text.split()
        if len(parts) < 2 or not parts[1].isdigit():
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deactivate pseudo_id', parse_mode='HTML')
            return
        pseudo_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–µ
        pseudos = await get_all_pseudo_names()
        pseudo_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if isinstance(pseudos, list):
            for pseudo in pseudos:
                if pseudo.get('id') == pseudo_id:
                    pseudo_name = pseudo.get('pseudo', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    break
        
        result = await deactivate_pseudo_name(pseudo_id)
        
        if 'success' in result:
            deactivate_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            deactivate_message += f"<b>–ò–º—è:</b> \"{pseudo_name}\"\n"
            deactivate_message += f"<b>ID:</b> {pseudo_id}\n"
            deactivate_message += f"<b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
            deactivate_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            deactivate_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        else:
            deactivate_message = f"<b>–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
            deactivate_message += f"<b>–ò–º—è:</b> \"{pseudo_name}\"\n"
            deactivate_message += f"<b>ID:</b> {pseudo_id}\n"
            deactivate_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(deactivate_message, parse_mode="HTML")

    @dp.message(Command("stats"))
    async def stats_handler(message: types.Message):
        from datetime import datetime, timezone
        import aiohttp
        from collections import Counter
        user_id = message.from_user.id
        user_info = await get_user_info(user_id)
        if not user_info or user_info.get('error'):
            await message.answer("<b>–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>", parse_mode="HTML")
            return
        pseudos = await get_user_pseudo_names_full(user_id)
        pseudos_str = ', '.join([p[1] for p in pseudos]) if pseudos else '–ù–µ—Ç'
        API_BASE = 'http://backend:8000/api/'
        posts = []
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE}posts/?author={user_id}&page_size=1000"
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if isinstance(data, dict) and 'results' in data:
                        posts = data['results']
                    elif isinstance(data, list):
                        posts = data
        total = len(posts)
        posted = sum(1 for p in posts if p.get('is_posted'))
        rejected = sum(1 for p in posts if p.get('is_rejected'))
        queued = sum(1 for p in posts if not p.get('is_posted') and not p.get('is_rejected'))
        reg_date = user_info.get('created_at')
        reg_dt = None
        days_with_us = None
        reg_str = 'N/A'
        if reg_date:
            try:
                reg_dt = datetime.fromisoformat(reg_date)
                reg_str = reg_dt.strftime('%d.%m.%Y, %H:%M')
                now = datetime.now(timezone.utc)
                days_with_us = (now - reg_dt.replace(tzinfo=timezone.utc)).days
            except Exception:
                reg_str = reg_date
        # –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç
        first_post = min(posts, key=lambda p: p.get('created_at', '9999'), default=None)
        first_post_str = ''
        if first_post and first_post.get('created_at'):
            try:
                first_dt = datetime.fromisoformat(first_post['created_at'])
                first_post_str = f"–í–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ {first_dt.strftime('%d.%m.%Y, %H:%M')}\n"
            except Exception:
                first_post_str = f"–í–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ {first_post['created_at']}\n"
            first_post_str += f"<i>{first_post.get('content','')[:120]}{'...' if len(first_post.get('content',''))>120 else ''}</i>\n"
        # –¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
        top_posts = sorted(posts, key=lambda p: len(p.get('content','')), reverse=True)[:3]
        top_posts_str = ''
        if top_posts and total > 0:
            top_posts_str = '<b>üèÜ –¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞:</b>\n'
            for i, p in enumerate(top_posts, 1):
                frag = p.get('content','')[:60].replace('\n',' ')
                top_posts_str += f"{i}. {frag}{'...' if len(p.get('content',''))>60 else ''} ({len(p.get('content',''))} —Å–∏–º–≤.)\n"
        # --- –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö ---
        comments = await get_comments_for_user_posts(user_id)
        comments_count = len(comments)
        # –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –ø–æ—Å—Ç
        avg_comments = round(comments_count / total, 2) if total > 0 else 0
        # --- –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Ç–æ–ø-—Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        import re
        from collections import Counter
        stopwords = set([
            '–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ',
            '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç',
            '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ',
            '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º',
            '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö',
            '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞',
            '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏',
            '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏',
            '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ',
            '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π',
            '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ',
            '–≤—Å—é', '–º–µ–∂–¥—É'
        ])
        all_text = ' '.join(p.get('content', '') for p in posts if p.get('content'))
        all_text = re.sub(r'https?://\S+', '', all_text)
        all_text = re.sub(r'[^–∞-—è–ê-–Øa-zA-Z—ë–Å\s]', ' ', all_text)
        all_text = all_text.lower()
        words = [w for w in all_text.split() if len(w) > 3 and w not in stopwords]
        word_counter = Counter(words)
        top_words = word_counter.most_common(10)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        firstname = user_info.get('firstname', '') or ''
        lastname = user_info.get('lastname', '') or ''
        username = user_info.get('username', None)
        name_line = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {firstname}{(' ' + lastname) if lastname and lastname != 'N/A' else ''}</b>\n"
        if username and username != 'N/A':
            name_line += f"<i>@{username}</i>\n"
        name_line += "\n"
        # –ë–ª–æ–∫ '–û –≤–∞—Å'
        about_block = ""
        if reg_dt and days_with_us is not None:
            about_block += f"<b>–° –Ω–∞–º–∏:</b> <u>{days_with_us} –¥–Ω–µ–π</u>\n"
        about_block += f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {user_info.get('level','N/A')}\n"
        about_block += f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user_info.get('balance','N/A')} —Ç.\n"
        about_block += f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:</b> {pseudos_str}\n"
        about_block += "\n"
        # –ë–ª–æ–∫ '–í–∞—à–∏ –ø–æ—Å—Ç—ã'
        posts_block = "<b>–í–∞—à–∏ –ø–æ—Å—Ç—ã:</b>\n"
        posts_block += f"<b>–í—Å–µ–≥–æ:</b> {total}\n"
        posts_block += f"<b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {posted}\n"
        posts_block += f"<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {rejected}\n"
        posts_block += f"<b>–í –æ—á–µ—Ä–µ–¥–∏:</b> {queued}\n"
        posts_block += "\n"
        # –¢–æ–ø-3 –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
        top_block = ""
        if top_posts_str:
            top_block += '<b>üèÜ –¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞:</b>\n'
            for i, p in enumerate(top_posts, 1):
                frag = p.get('content','')[:120].replace('\n',' ')
                top_block += f"<blockquote>{i}. {frag}{'...' if len(p.get('content',''))>120 else ''} ({len(p.get('content',''))} —Å–∏–º–≤.)</blockquote>\n"
        # –ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞
        first_block = ""
        if first_post_str:
            first_block += f"<b>–ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞</b>\n<blockquote>{first_post_str}</blockquote>\n"
        # –¢–æ–ø-—Å–ª–æ–≤–∞
        words_block = ""
        if top_words:
            words_block += '\n<b>–¢–æ–ø-—Å–ª–æ–≤–∞ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤:</b>\n'
            words_block += ', '.join(f'{w} ({c})' for w, c in top_words)
            words_block += '\n'
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        stats_message = name_line + about_block + posts_block + top_block + first_block + words_block
        stats_message += "\n<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π —â–∏—Ç–ø–æ—Å—Ç–∏—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã!</i>"
        await message.answer(stats_message, parse_mode="HTML")

    @dp.message(Command("queue"))
    async def queue_handler(message: types.Message):
        offers_chat_id = os.getenv("OFFERS_CHAT_ID")
        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        allowed_ids = {str(offers_chat_id), str(admin_chat_id)}
        if str(message.chat.id) not in allowed_ids:
            return
        queue_info = await get_queue_info()
        if queue_info.get("error"):
            await message.answer("<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:</b> {}".format(queue_info['error']), parse_mode="HTML")
            return
        text = await format_queue_message(queue_info.get("results", []))
        if isinstance(text, Text) and str(text) == "<b>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</b>":
            await message.answer(str(text), parse_mode="HTML", disable_web_page_preview=True)
        else:
            await message.answer(**text.as_kwargs(), disable_web_page_preview=True)

    @dp.message(Command("queueupdate"))
    async def queueupdate_handler(message: types.Message):
        offers_chat_id = os.getenv("OFFERS_CHAT_ID")
        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        allowed_ids = {str(offers_chat_id), str(admin_chat_id)}
        if str(message.chat.id) not in allowed_ids:
            return
        result = await recalculate_queue_after_immediate_publication()
        if result.get("error"):
            await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ—á–µ—Ä–µ–¥–∏:</b> {result['error']}", parse_mode="HTML")
            return
        await message.answer(f"<b>–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞:</b> {result.get('message', '–ì–æ—Ç–æ–≤–æ')}", parse_mode="HTML")
        queue_info = await get_queue_info()
        text = await format_queue_message(queue_info.get("results", []))
        if isinstance(text, Text) and str(text) == "<b>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</b>":
            await message.answer(str(text), parse_mode="HTML", disable_web_page_preview=True)
        else:
            await message.answer(**text.as_kwargs(), disable_web_page_preview=True)

    @dp.message(Command("getuser"))
    async def getuser_handler(message: types.Message):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞
        offers_chat_id = os.getenv("OFFERS_CHAT_ID")
        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        allowed_ids = {str(offers_chat_id), str(admin_chat_id)}
        if str(message.chat.id) not in allowed_ids:
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getuser <user_id –∏–ª–∏ username>")
            return
        query = parts[1].strip().lstrip('@')
        user = None
        all_users = await get_all_users()
        found_by = None
        # –ü–æ–∏—Å–∫ –ø–æ ID
        if query.isdigit():
            user = await get_user_info(int(query))
            if user and not user.get('error'):
                found_by = 'id'
        # –ü–æ–∏—Å–∫ –ø–æ username (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if not user or user.get('error'):
            for u in all_users:
                if (u.get('username') or '').lower() == query.lower():
                    user = u
                    found_by = 'username'
                    break
        # –ü–æ–∏—Å–∫ –ø–æ username —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ (–õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω)
        if not user:
            usernames = [(u, (u.get('username') or '')) for u in all_users]
            similar = [(u, difflib.SequenceMatcher(None, (uname).lower(), query.lower()).ratio()) for u, uname in usernames if uname]
            similar = sorted(similar, key=lambda x: x[1])
            if similar and similar[0][1] > 0.6:
                user = similar[0][0]
                found_by = 'username_levenshtein'
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not user or user.get('error'):
            # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ
            usernames = [u.get('username', '') or '' for u in all_users]
            matches = difflib.get_close_matches(query, usernames, n=5, cutoff=0.4)
            if matches:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: " + ", ".join([f"@{m}" for m in matches]))
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ—É (–∫—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–∏–∫–∏)
        user_id = user.get('id')
        pseudos = await get_user_pseudo_names_full(user_id) if user_id else []
        pseudos_str = ', '.join([p[1] for p in pseudos]) if pseudos else '–ù–µ—Ç'
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        info = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"
        info += f"<b>ID:</b> {user.get('id', 'N/A')}\n"
        info += f"<b>Username:</b> @{user.get('username', 'N/A')}\n"
        info += f"<b>–ò–º—è:</b> {user.get('firstname', 'N/A')} {user.get('lastname', '')}\n"
        info += f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {user.get('level', 'N/A')}\n"
        info += f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user.get('balance', 'N/A')} —Ç.\n"
        info += f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:</b> {pseudos_str}\n"
        info += f"<b>–ó–∞–±–∞–Ω–µ–Ω:</b> {'–î–∞' if user.get('is_banned') else '–ù–µ—Ç'}\n"
        info += f"<b>–ê–¥–º–∏–Ω:</b> {'–î–∞' if user.get('is_admin') else '–ù–µ—Ç'}\n"
        info += f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.get('created_at', 'N/A')}\n"
        if found_by == 'levenshtein':
            info += f"\n<i>‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø–æ –ø–æ—Ö–æ–∂–µ–º—É username</i>"
        await message.answer(info, parse_mode="HTML")

