from aiogram import types, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from db.wapi import ban_user, unban_user, add_pseudo_name, add_balance, set_balance, get_all_pseudo_names, deactivate_pseudo_name, set_user_level, get_user_info, get_active_posts_count, get_recent_posts, get_all_users, get_queue_info, recalculate_queue_after_immediate_publication, get_user_pseudo_names_full
import re
from aiogram.methods import EditMessageReplyMarkup
import aiohttp
import logging
from datetime import datetime, timezone, timedelta
import os
import difflib
from aiogram.utils.formatting import ExpandableBlockQuote, Bold, Text, Italic, TextLink, Underline, Code, Pre, BlockQuote

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ suggest
POST_INTERVAL_MINUTES = 30

async def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        logging.info(f"[is_admin] Checking admin status for user {user_id}")
        user_info = await get_user_info(user_id)
        logging.info(f"[is_admin] User info for {user_id}: {user_info}")
        
        if 'error' in user_info:
            logging.warning(f"[is_admin] Error getting user info for {user_id}: {user_info['error']}")
            return False
        
        is_admin_status = user_info.get('is_admin', False)
        logging.info(f"[is_admin] User {user_id} admin status: {is_admin_status}")
        return bool(is_admin_status)
    except Exception as e:
        logging.error(f"[is_admin] Exception checking admin status for {user_id}: {e}")
        return False

def register_admin_handlers(dp: Dispatcher):
    @dp.callback_query(F.data.startswith("ban_"))
    async def handle_ban(callback: types.CallbackQuery):
        if not callback.data:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∞")
            return
        user_id = int(callback.data.replace("ban_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if 'error' not in user_info:
            username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω
        result = await ban_user(user_id=user_id)
        
        msg = callback.message
        if isinstance(msg, types.Message):
            await msg.edit_reply_markup(reply_markup=None)
        elif msg is not None and getattr(msg, "chat", None) is not None and getattr(msg, "message_id", None) is not None:
            chat_id = msg.chat.id if getattr(msg, 'chat', None) is not None else None
            message_id = msg.message_id if getattr(msg, 'message_id', None) is not None else None
            if chat_id is not None and message_id is not None:
                await callback.bot(EditMessageReplyMarkup(chat_id=chat_id, message_id=message_id, reply_markup=None))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'error' in result:
            ban_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            ban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            ban_message += f"üö´ <b>–û—à–∏–±–∫–∞:</b> {result['error']}"
        else:
            ban_message = f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!</b>\n\n"
            ban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            ban_message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = callback.from_user.username if callback.from_user and getattr(callback.from_user, 'username', None) else None
            if not admin_name:
                admin_name = callback.from_user.first_name if callback.from_user and getattr(callback.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            ban_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!", show_alert=True)
    
    @dp.message(Command("unban"))
    async def unban_handler(message: types.Message):
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if 'error' not in user_info:
            username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–∞–Ω
        result = await unban_user(user_id=user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'error' in result:
            unban_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            unban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            unban_message += f"üö´ <b>–û—à–∏–±–∫–∞:</b> {result['error']}"
        else:
            unban_message = f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            unban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            unban_message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            unban_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        
        await message.answer(unban_message, parse_mode="HTML")

    @dp.message(Command("levelup"))
    async def levelup_handler(message: types.Message):
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /levelup &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /levelup &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        current_level = int(user_info.get('level', 1))
        new_level = min(current_level + 1, 10)  # –ù–µ –±–æ–ª—å—à–µ 10
        
        if new_level == current_level:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (10)")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        result = await set_user_level(user_id, new_level)
        if 'error' in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {result['error']}", parse_mode='HTML')
            return
        
        await message.answer(f"<b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–≤—ã—à–µ–Ω —Å {current_level} –¥–æ {new_level}</b>", parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!</b>\n\n"
                         f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                         f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}\n\n"
                         f"–¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤",
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.warning(f"Could not send levelup notification to user {user_id}: {e}")

    @dp.message(Command("leveldown"))
    async def leveldown_handler(message: types.Message):
        """–ü–æ–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /leveldown &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /leveldown &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        current_level = int(user_info.get('level', 1))
        new_level = max(current_level - 1, 1)  # –ù–µ –º–µ–Ω—å—à–µ 1
        
        if new_level == current_level:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (1)")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        result = await set_user_level(user_id, new_level)
        if 'error' in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {result['error']}", parse_mode='HTML')
            return
        
        await message.answer(f"<b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–Ω–∏–∂–µ–Ω —Å {current_level} –¥–æ {new_level}</b>", parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω!</b>\n\n"
                         f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                         f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}\n\n"
                         f"–¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤",
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.warning(f"Could not send leveldown notification to user {user_id}: {e}")

    @dp.message(Command("addpseudo"))
    async def addpseudo_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpseudo "–ù–∏–∫–Ω–µ–π–º" —Ü–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /addpseudo "–Ø–¥–µ—Ä–Ω—ã–π —à–µ–ø–æ—Ç" 150', parse_mode='HTML')
            return
        pattern = r'^/addpseudo\s+"([^"]+)"\s+(\d+(?:\.\d+)?)'
        match = re.match(pattern, message.text)
        if not match:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpseudo "–ù–∏–∫–Ω–µ–π–º" —Ü–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /addpseudo "–Ø–¥–µ—Ä–Ω—ã–π —à–µ–ø–æ—Ç" 150', parse_mode='HTML')
            return
        nickname = match.group(1)
        price = float(match.group(2))
        
        result = await add_pseudo_name(nickname, price)
        
        if 'id' in result:
            pseudo_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–¶–µ–Ω–∞:</b> {price:.2f} —Ç.\n"
            pseudo_message += f"<b>ID:</b> {result['id']}\n"
            pseudo_message += f"<b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
            pseudo_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            pseudo_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        elif 'pseudo' in result and 'unique' in str(result['pseudo']):
            pseudo_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–û—à–∏–±–∫–∞:</b> –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            pseudo_message += f"<b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥–æ–π /allpseudos"
        else:
            pseudo_message = f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–¶–µ–Ω–∞:</b> {price:.2f} —Ç.\n"
            pseudo_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(pseudo_message, parse_mode="HTML")

    @dp.message(Command("addbalance"))
    async def addbalance_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        user_id, amount = parts[1], parts[2]
        if not user_id.isdigit():
            await message.answer('user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        try:
            amount = float(amount)
        except ValueError:
            await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        old_balance = float(user_info.get('balance', 0))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await add_balance(user_id, amount)
        
        if 'balance' in result:
            new_balance = float(result["balance"])
            balance_message = f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {old_balance} —Ç.\n"
            balance_message += f"<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> +{amount} —Ç.\n"
            balance_message += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['balance']} —Ç.\n"
            balance_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            balance_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        else:
            balance_message = f"<b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—É–º–º–∞:</b> {amount} —Ç.\n"
            balance_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(balance_message, parse_mode="HTML")

    @dp.message(Command("setbalance"))
    async def setbalance_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance user_id —Å—É–º–º–∞', parse_mode='HTML')
            return
        user_id, amount = parts[1], parts[2]
        if not user_id.isdigit():
            await message.answer('user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        try:
            amount = float(amount)
        except ValueError:
            await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º', parse_mode='HTML')
            return
        
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        old_balance = float(user_info.get('balance', 0))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await set_balance(user_id, amount)
        
        if 'balance' in result:
            balance_message = f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {old_balance} —Ç.\n"
            balance_message += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['balance']} —Ç.\n"
            balance_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            balance_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        else:
            balance_message = f"<b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—É–º–º–∞:</b> {amount} —Ç.\n"
            balance_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(balance_message, parse_mode="HTML")

    @dp.message(Command("allpseudos"))
    async def allpseudos_handler(message: types.Message):
        pseudos = await get_all_pseudo_names()
        if isinstance(pseudos, dict) and pseudos.get("error"):
            await message.answer(f'<b>–û—à–∏–±–∫–∞:</b> {pseudos}', parse_mode='HTML')
            return
        if not pseudos:
            await message.answer('<b>–ù–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</b>', parse_mode='HTML')
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_count = len(pseudos)
        available_count = sum(1 for p in pseudos if p.get('is_available', False))
        unavailable_count = total_count - available_count
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        header = f"<b>–í—Å–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã ({total_count})</b>\n\n"
        header += f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        header += f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
        header += f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {unavailable_count}\n\n"
        header += f"<b>–°–ø–∏—Å–æ–∫:</b>\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
        lines = []
        for p in pseudos:
            status_icon = "‚úÖ" if p.get('is_available', False) else "‚ùå"
            status_text = "–î–æ—Å—Ç—É–ø–µ–Ω" if p.get('is_available', False) else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            lines.append(f"{status_icon} <b>ID {p['id']}:</b> \"{p['pseudo']}\" | {p['price']} —Ç. | {status_text}")
        
        text = header + '\n'.join(lines)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 4096:
            parts = []
            current_part = ""
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    parts.append(header + current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            if current_part:
                parts.append(header + current_part)
            
            for i, part in enumerate(parts, 1):
                await message.answer(f"{part}\n\nüìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i} –∏–∑ {len(parts)}</b>", parse_mode='HTML')
        else:
            await message.answer(text, parse_mode='HTML')

    @dp.message(Command("deactivate"))
    async def deactivate_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deactivate pseudo_id', parse_mode='HTML')
            return
        parts = message.text.split()
        if len(parts) < 2 or not parts[1].isdigit():
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deactivate pseudo_id', parse_mode='HTML')
            return
        pseudo_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–µ
        pseudos = await get_all_pseudo_names()
        pseudo_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if isinstance(pseudos, list):
            for pseudo in pseudos:
                if pseudo.get('id') == pseudo_id:
                    pseudo_name = pseudo.get('pseudo', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    break
        
        result = await deactivate_pseudo_name(pseudo_id)
        
        if 'success' in result:
            deactivate_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            deactivate_message += f"<b>–ò–º—è:</b> \"{pseudo_name}\"\n"
            deactivate_message += f"<b>ID:</b> {pseudo_id}\n"
            deactivate_message += f"<b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
            deactivate_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            admin_name = message.from_user.username if message.from_user and getattr(message.from_user, 'username', None) else None
            if not admin_name:
                admin_name = message.from_user.first_name if message.from_user and getattr(message.from_user, 'first_name', None) else "–ê–¥–º–∏–Ω"
            deactivate_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {admin_name}"
        else:
            deactivate_message = f"<b>–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
            deactivate_message += f"<b>–ò–º—è:</b> \"{pseudo_name}\"\n"
            deactivate_message += f"<b>ID:</b> {pseudo_id}\n"
            deactivate_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(deactivate_message, parse_mode="HTML")

    @dp.message(Command("stats"))
    async def stats_handler(message: types.Message):
        from datetime import datetime, timezone
        import aiohttp
        user_id = message.from_user.id
        user_info = await get_user_info(user_id)
        if not user_info or user_info.get('error'):
            await message.answer("<b>–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>", parse_mode="HTML")
            return
        pseudos = await get_user_pseudo_names_full(user_id)
        pseudos_str = ', '.join([p[1] for p in pseudos]) if pseudos else '–ù–µ—Ç'
        API_BASE = 'http://backend:8000/api/'
        posts = []
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE}posts/?author={user_id}&page_size=1000"
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if isinstance(data, dict) and 'results' in data:
                        posts = data['results']
                    elif isinstance(data, list):
                        posts = data
        total = len(posts)
        posted = sum(1 for p in posts if p.get('is_posted'))
        rejected = sum(1 for p in posts if p.get('is_rejected'))
        queued = sum(1 for p in posts if not p.get('is_posted') and not p.get('is_rejected'))
        reg_date = user_info.get('created_at')
        reg_dt = None
        days_with_us = None
        reg_str = 'N/A'
        if reg_date:
            try:
                reg_dt = datetime.fromisoformat(reg_date)
                reg_str = reg_dt.strftime('%d.%m.%Y, %H:%M')
                now = datetime.now(timezone.utc)
                days_with_us = (now - reg_dt.replace(tzinfo=timezone.utc)).days
            except Exception:
                reg_str = reg_date
        # –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç
        first_post = min(posts, key=lambda p: p.get('created_at', '9999'), default=None)
        first_post_str = ''
        if first_post and first_post.get('created_at'):
            try:
                first_dt = datetime.fromisoformat(first_post['created_at'])
                first_post_str = f"–í–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ {first_dt.strftime('%d.%m.%Y, %H:%M')}\n"
            except Exception:
                first_post_str = f"–í–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ {first_post['created_at']}\n"
            first_post_str += f"<i>{first_post.get('content','')[:120]}{'...' if len(first_post.get('content',''))>120 else ''}</i>\n"
        # –¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
        top_posts = sorted(posts, key=lambda p: len(p.get('content','')), reverse=True)[:3]
        top_posts_str = ''
        if top_posts and total > 0:
            top_posts_str = '<b>üèÜ –¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞:</b>\n'
            for i, p in enumerate(top_posts, 1):
                frag = p.get('content','')[:60].replace('\n',' ')
                top_posts_str += f"{i}. {frag}{'...' if len(p.get('content',''))>60 else ''} ({len(p.get('content',''))} —Å–∏–º–≤.)\n"
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        stats_message = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_info.get('firstname','') or ''} {user_info.get('lastname','') or ''}</b>\n"
        stats_message += f"@{user_info.get('username','N/A')}\n"
        stats_message += f"\n"
        if reg_dt and days_with_us is not None:
            stats_message += f"‚è±Ô∏è –í—ã —Å –Ω–∞–º–∏ —Å {reg_str}, —É–∂–µ <b>{days_with_us}</b> –¥–Ω–µ–π.\n"
        stats_message += f"\n"
        stats_message += f"–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å <b>{total}</b> –ø–æ—Å—Ç–æ–≤!\n"
        stats_message += f"<b>‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {posted}\n"
        stats_message += f"<b>‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {rejected}\n"
        stats_message += f"<b>üïì –í –æ—á–µ—Ä–µ–¥–∏:</b> {queued}\n"
        stats_message += f"\n"
        stats_message += f"<b>ü¶Ñ –í–∞—à–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã:</b> {pseudos_str}\n"
        stats_message += f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user_info.get('balance','N/A')} —Ç.\n"
        stats_message += f"<b>üèÖ –£—Ä–æ–≤–µ–Ω—å:</b> {user_info.get('level','N/A')}\n"
        stats_message += f"\n"
        if top_posts_str:
            stats_message += top_posts_str + '\n'
        if first_post_str:
            stats_message += f"<b>–ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞</b>\n{first_post_str}\n"
        stats_message += f"<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π —â–∏—Ç–ø–æ—Å—Ç–∏—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã!</i>"
        await message.answer(stats_message, parse_mode="HTML")

    @dp.message(Command("getuser"))
    async def getuser_handler(message: types.Message):
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getuser <username –∏–ª–∏ ID>")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getuser <username –∏–ª–∏ ID>")
            return
        query = parts[1].strip().lstrip('@')
        if not query:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫, —á–∞—Å—Ç—å –Ω–∏–∫–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —á–∏—Å–ª–æ–≤—ã–º ID
        if query.isdigit():
            user_id = int(query)
            user_info = await get_user_info(user_id)
            if 'error' not in user_info:
                user = user_info
                reply = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID:</b>\n\n"
                reply += (
                    f"ID: <code>{user['id']}</code>\n"
                    f"Username: @{format_username(user.get('username'))}\n"
                    f"–ò–º—è: {user.get('firstname', '')} {user.get('lastname', '')}\n"
                    f"–ë–∞–ª–∞–Ω—Å: {user.get('balance', 'N/A')}\n"
                    f"–£—Ä–æ–≤–µ–Ω—å: {user.get('level', 'N/A')}\n"
                    f"–ê–¥–º–∏–Ω: {'–î–∞' if user.get('is_admin') else '–ù–µ—Ç'}\n"
                    f"–ë–∞–Ω: {'–î–∞' if user.get('is_banned') else '–ù–µ—Ç'}\n"
                )
                await message.answer(reply, parse_mode="HTML")
                return
            else:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –ï—Å–ª–∏ –Ω–µ ID, –∏—â–µ–º –ø–æ username –∏ –∏–º–µ–Ω–∏
        users = await get_all_users()
        if not users:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ username –∏ firstname/lastname
        candidates = []
        for u in users:
            uname = (u.get('username') or '').lower()
            fname = (u.get('firstname') or '').lower()
            lname = (u.get('lastname') or '').lower()
            full = f"{fname} {lname}".strip()
            candidates.append((u, uname, full))
        # –°—á–∏—Ç–∞–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å
        scored = []
        for u, uname, full in candidates:
            score = max(
                difflib.SequenceMatcher(None, query.lower(), uname).ratio(),
                difflib.SequenceMatcher(None, query.lower(), full).ratio()
            )
            scored.append((score, u))
        scored.sort(reverse=True, key=lambda x: x[0])
        top = [u for score, u in scored if score > 0.3][:5]
        if not top:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —á–∞—Å—Ç—å –Ω–∏–∫–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        reply = "<b>–ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for u in top:
            reply += (
                f"ID: <code>{u['id']}</code>\n"
                f"Username: @{format_username(u.get('username'))}\n"
                f"–ò–º—è: {u.get('firstname', '')} {u.get('lastname', '')}\n"
                f"–ë–∞–ª–∞–Ω—Å: {u.get('balance', 'N/A')}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {u.get('level', 'N/A')}\n"
                f"–ê–¥–º–∏–Ω: {'–î–∞' if u.get('is_admin') else '–ù–µ—Ç'}\n"
                f"–ë–∞–Ω: {'–î–∞' if u.get('is_banned') else '–ù–µ—Ç'}\n"
                "----------------------\n"
            )
        await message.answer(reply, parse_mode="HTML")

    def format_queue_message(posts, title="–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤"):
        import os
        from aiogram.utils.formatting import TextLink
        offers_chat_id = os.getenv("OFFERS_CHAT_ID")
        if offers_chat_id and offers_chat_id.startswith('-100'):
            offers_chat_id_link = offers_chat_id[4:]
        else:
            offers_chat_id_link = offers_chat_id or ''
        content = []
        content.append(Bold(f"üìã {title}\n"))
        content.append(Text("\n"))
        content.append(Text(f"–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(posts)} –ø–æ—Å—Ç–æ–≤\n"))
        content.append(Text(f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"))
        content.append(Text("\n"))
        for i, post in enumerate(posts, 1):
            author_id = post.get('author', 'N/A')
            content_text = post.get('content', '')
            posted_at_str = post.get('posted_at', 'N/A')
            post_id = post.get('id', 'N/A')
            telegram_id = post.get('telegram_id', 'N/A')
            try:
                if posted_at_str and ('+' in posted_at_str or 'Z' in posted_at_str):
                    posted_dt = datetime.strptime(posted_at_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                    posted_dt = posted_dt.astimezone(timezone(timedelta(hours=3)))
                    formatted_time = posted_dt.strftime('%d.%m.%Y –≤ %H:%M')
                    now = datetime.now(timezone(timedelta(hours=3)))
                    time_diff = (posted_dt - now).total_seconds()
                    if time_diff > 0:
                        hours = int(time_diff // 3600)
                        minutes = int((time_diff % 3600) // 60)
                        if hours > 0:
                            time_until = f"—á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                        else:
                            time_until = f"—á–µ—Ä–µ–∑ {minutes}–º"
                        status_emoji = "‚è≥"
                    else:
                        time_until = "–≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                        status_emoji = "‚úÖ"
                else:
                    formatted_time = posted_at_str
                    time_until = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    status_emoji = "‚ùì"
            except Exception as e:
                formatted_time = posted_at_str
                time_until = "–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
                status_emoji = "‚ùå"
            content_preview = content_text[:80] + '...' if len(content_text) > 80 else content_text
            if not content_preview.strip():
                content_preview = Italic("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                content_preview = Text(content_preview)
            content.append(Bold(f"{i}. {status_emoji} –ü–æ—Å—Ç #{post_id}\n"))
            content.append(Text(f"üë§ –ê–≤—Ç–æ—Ä: {author_id}\n"))
            content.append(Text("üìù –ö–æ–Ω—Ç–µ–Ω—Ç: ") + content_preview + Text("\n"))
            content.append(Text(f"‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {formatted_time}\n"))
            content.append(Text(f"üïê –°—Ç–∞—Ç—É—Å: {time_until}\n"))
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ telegram_id
            if offers_chat_id_link and telegram_id != 'N/A':
                msg_link = f"https://t.me/c/{offers_chat_id_link}/{telegram_id}"
                content.append(Text("üÜî Telegram ID: ") + TextLink(str(telegram_id), url=msg_link) + Text("\n"))
            else:
                content.append(Text(f"üÜî Telegram ID: {telegram_id}\n"))
            content.append(Text("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"))
            content.append(Text("\n"))  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å—Ç–µ
        if posts:
            first_post = posts[0]
            first_post_time = first_post.get('posted_at')
            if first_post_time:
                try:
                    if '+' in first_post_time or 'Z' in first_post_time:
                        first_dt = datetime.strptime(first_post_time.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                        first_dt = first_dt.astimezone(timezone(timedelta(hours=3)))
                        now = datetime.now(timezone(timedelta(hours=3)))
                        time_to_first = (first_dt - now).total_seconds()
                        if time_to_first > 0:
                            hours = int(time_to_first // 3600)
                            minutes = int((time_to_first % 3600) // 60)
                            if hours > 0:
                                next_post_info = f"—á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                            else:
                                next_post_info = f"—á–µ—Ä–µ–∑ {minutes}–º"
                        else:
                            next_post_info = "–≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                        content.append(Bold("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"))
                        content.append(Text(f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: {next_post_info}\n"))
                        content.append(Text(f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {POST_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n"))
                        content.append(Text(f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: 01:00-10:00 (–ø–æ—Å—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –Ω–∞ 10:00)\n"))
                        content.append(Text("\n"))
                except:
                    pass
        return ExpandableBlockQuote(*content)

    @dp.message(Command("queue"))
    async def queue_handler(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞—Ö –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if not await is_admin(message.from_user.id):
            await message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã</b>")
            return
        queue_info = await get_queue_info()
        if 'error' in queue_info:
            await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:</b> {queue_info['error']}", parse_mode='HTML')
            return
        posts = queue_info.get('results', [])
        if not posts:
            await message.answer("<b>üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤</b>\n\n<blockquote>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</blockquote>", parse_mode="HTML")
            return
        queue_message = format_queue_message(posts, title="–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤")
        await message.answer(**queue_message.as_kwargs())

    @dp.message(Command("queueupdate"))
    async def queueupdate_handler(message: types.Message):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if not await is_admin(message.from_user.id):
            await message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã</b>")
            return
        try:
            result = await recalculate_queue_after_immediate_publication()
            if 'error' in result:
                await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ—á–µ—Ä–µ–¥–∏:</b> {result['error']}", parse_mode='HTML')
                return
            queue_info = await get_queue_info()
            if 'error' not in queue_info:
                posts = queue_info.get('results', [])
                if posts:
                    queue_message = format_queue_message(posts, title="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤")
                    await message.answer(**queue_message.as_kwargs())
        except Exception as e:
            logging.exception(f"[queueupdate_handler] Exception: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –æ—á–µ—Ä–µ–¥–∏: {str(e)}", parse_mode='HTML')

    @dp.message(Command("makeadmin"))
    async def makeadmin_handler(message: types.Message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
        if message.from_user.id != 914029246:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin <user_id>")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin <user_id>")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            error_text = user_info.get('error', '')
            if '404' in error_text:
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>', parse_mode='HTML')
            else:
                await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {error_text}', parse_mode='HTML')
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API
        headers = {'Content-Type': 'application/json'}
        API_URL = f"http://backend:8000/api/users/{user_id}/"
        update_data = {'is_admin': True}
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.patch(API_URL, headers=headers, json=update_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        await message.answer(
                            f"‚úÖ <b>–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
                            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
                            f"üëÆ <b>–°—É–ø–µ—Ä–∞–¥–º–∏–Ω:</b> {message.from_user.username or message.from_user.first_name}",
                            parse_mode="HTML"
                        )
                    else:
                        error_text = await response.text()
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤: {response.status} - {error_text}", parse_mode='HTML')
        except Exception as e:
            logging.error(f"[makeadmin_handler] Exception: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤: {str(e)}", parse_mode='HTML')

def format_username(username):
    if not username or str(username).lower() == 'none':
        return 'N/A'
    return username