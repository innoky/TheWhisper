from aiogram import types, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from db.wapi import ban_user, unban_user, add_pseudo_name, add_balance, set_balance, get_all_pseudo_names, deactivate_pseudo_name, set_user_level, get_user_info, get_active_posts_count, get_recent_posts, get_all_users, get_queue_info, recalculate_queue_after_immediate_publication
import re
from aiogram.methods import EditMessageReplyMarkup
import aiohttp
import logging
from datetime import datetime, timezone, timedelta
import os
import difflib

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ suggest
POST_INTERVAL_MINUTES = 30

async def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        logging.info(f"[is_admin] Checking admin status for user {user_id}")
        user_info = await get_user_info(user_id)
        logging.info(f"[is_admin] User info for {user_id}: {user_info}")
        
        if 'error' in user_info:
            logging.warning(f"[is_admin] Error getting user info for {user_id}: {user_info['error']}")
            return False
        
        is_admin_status = user_info.get('is_admin', False)
        logging.info(f"[is_admin] User {user_id} admin status: {is_admin_status}")
        return bool(is_admin_status)
    except Exception as e:
        logging.error(f"[is_admin] Exception checking admin status for {user_id}: {e}")
        return False

def register_admin_handlers(dp: Dispatcher):
    @dp.callback_query(F.data.startswith("ban_"))
    async def handle_ban(callback: types.CallbackQuery):
        if not callback.data:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–Ω–∞")
            return
        user_id = int(callback.data.replace("ban_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if 'error' not in user_info:
            username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω
        result = await ban_user(user_id=user_id)
        
        msg = callback.message
        if isinstance(msg, types.Message):
            await msg.edit_reply_markup(reply_markup=None)
        elif msg is not None and getattr(msg, "chat", None) is not None and getattr(msg, "message_id", None) is not None:
            await callback.bot(EditMessageReplyMarkup(chat_id=msg.chat.id, message_id=msg.message_id, reply_markup=None))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'error' in result:
            ban_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            ban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            ban_message += f"üö´ <b>–û—à–∏–±–∫–∞:</b> {result['error']}"
        else:
            ban_message = f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!</b>\n\n"
            ban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            ban_message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            ban_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {callback.from_user.username or callback.from_user.first_name}"
        
        await callback.answer(ban_message, show_alert=True)
    
    @dp.message(Command("unban"))
    async def unban_handler(message: types.Message):
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if 'error' not in user_info:
            username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–∞–Ω
        result = await unban_user(user_id=user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'error' in result:
            unban_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
            unban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            unban_message += f"üö´ <b>–û—à–∏–±–∫–∞:</b> {result['error']}"
        else:
            unban_message = f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            unban_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            unban_message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            unban_message += f"üëÆ <b>–ê–¥–º–∏–Ω:</b> {message.from_user.username or message.from_user.first_name}"
        
        await message.answer(unban_message, parse_mode="HTML")

    @dp.message(Command("levelup"))
    async def levelup_handler(message: types.Message):
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /levelup &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /levelup &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            await message.answer(f"<b>–û—à–∏–±–∫–∞:</b> {user_info['error']}")
            return
        
        current_level = int(user_info.get('level', 1))
        new_level = min(current_level + 1, 10)  # –ù–µ –±–æ–ª—å—à–µ 10
        
        if new_level == current_level:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (10)")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        result = await set_user_level(user_id, new_level)
        if 'error' in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {result['error']}")
            return
        
        await message.answer(f"<b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–≤—ã—à–µ–Ω —Å {current_level} –¥–æ {new_level}</b>")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!</b>\n\n"
                         f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                         f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}\n\n"
                         f"–¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤",
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.warning(f"Could not send levelup notification to user {user_id}: {e}")

    @dp.message(Command("leveldown"))
    async def leveldown_handler(message: types.Message):
        """–ü–æ–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /leveldown &lt;user_id&gt;")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /leveldown &lt;user_id&gt;")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            await message.answer(f"<b>–û—à–∏–±–∫–∞:</b> {user_info['error']}")
            return
        
        current_level = int(user_info.get('level', 1))
        new_level = max(current_level - 1, 1)  # –ù–µ –º–µ–Ω—å—à–µ 1
        
        if new_level == current_level:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (1)")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        result = await set_user_level(user_id, new_level)
        if 'error' in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {result['error']}")
            return
        
        await message.answer(f"<b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–Ω–∏–∂–µ–Ω —Å {current_level} –¥–æ {new_level}</b>")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if message.bot:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω</b>\n\n"
                         f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n"
                         f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}\n\n"
                         f"–ó–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤",
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.warning(f"Could not send leveldown notification to user {user_id}: {e}")

    @dp.message(Command("addpseudo"))
    async def addpseudo_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpseudo "–ù–∏–∫–Ω–µ–π–º" —Ü–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /addpseudo "–Ø–¥–µ—Ä–Ω—ã–π —à–µ–ø–æ—Ç" 150')
            return
        pattern = r'^/addpseudo\s+"([^"]+)"\s+(\d+(?:\.\d+)?)'
        match = re.match(pattern, message.text)
        if not match:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpseudo "–ù–∏–∫–Ω–µ–π–º" —Ü–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /addpseudo "–Ø–¥–µ—Ä–Ω—ã–π —à–µ–ø–æ—Ç" 150')
            return
        nickname = match.group(1)
        price = float(match.group(2))
        
        result = await add_pseudo_name(nickname, price)
        
        if 'id' in result:
            pseudo_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–¶–µ–Ω–∞:</b> {price:.2f} —Ç.\n"
            pseudo_message += f"<b>ID:</b> {result['id']}\n"
            pseudo_message += f"<b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
            pseudo_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            pseudo_message += f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.username or message.from_user.first_name}"
        elif 'pseudo' in result and 'unique' in str(result['pseudo']):
            pseudo_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–û—à–∏–±–∫–∞:</b> –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            pseudo_message += f"<b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥–æ–π /allpseudos"
        else:
            pseudo_message = f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
            pseudo_message += f"<b>–ò–º—è:</b> \"{nickname}\"\n"
            pseudo_message += f"<b>–¶–µ–Ω–∞:</b> {price:.2f} —Ç.\n"
            pseudo_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(pseudo_message, parse_mode="HTML")

    @dp.message(Command("addbalance"))
    async def addbalance_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance user_id —Å—É–º–º–∞')
            return
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addbalance user_id —Å—É–º–º–∞')
            return
        user_id, amount = parts[1], parts[2]
        if not user_id.isdigit():
            await message.answer('user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            return
        try:
            amount = float(amount)
        except ValueError:
            await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            return
        
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {user_info["error"]}')
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        old_balance = float(user_info.get('balance', 0))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await add_balance(user_id, amount)
        
        if 'balance' in result:
            new_balance = float(result["balance"])
            balance_message = f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {old_balance} —Ç.\n"
            balance_message += f"<b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> +{amount} —Ç.\n"
            balance_message += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['balance']} —Ç.\n"
            balance_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            balance_message += f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.username or message.from_user.first_name}"
        else:
            balance_message = f"<b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—É–º–º–∞:</b> {amount} —Ç.\n"
            balance_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(balance_message, parse_mode="HTML")

    @dp.message(Command("setbalance"))
    async def setbalance_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance user_id —Å—É–º–º–∞')
            return
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance user_id —Å—É–º–º–∞')
            return
        user_id, amount = parts[1], parts[2]
        if not user_id.isdigit():
            await message.answer('user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            return
        try:
            amount = float(amount)
        except ValueError:
            await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            return
        
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            await message.answer(f'<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b> {user_info["error"]}')
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        old_balance = float(user_info.get('balance', 0))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await set_balance(user_id, amount)
        
        if 'balance' in result:
            balance_message = f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å:</b> {old_balance} —Ç.\n"
            balance_message += f"<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {result['balance']} —Ç.\n"
            balance_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            balance_message += f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.username or message.from_user.first_name}"
        else:
            balance_message = f"<b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            balance_message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
            balance_message += f"<b>–°—É–º–º–∞:</b> {amount} —Ç.\n"
            balance_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(balance_message, parse_mode="HTML")

    @dp.message(Command("allpseudos"))
    async def allpseudos_handler(message: types.Message):
        pseudos = await get_all_pseudo_names()
        if isinstance(pseudos, dict) and pseudos.get("error"):
            await message.answer(f'<b>–û—à–∏–±–∫–∞:</b> {pseudos}')
            return
        if not pseudos:
            await message.answer('<b>–ù–µ—Ç –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</b>', parse_mode='HTML')
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_count = len(pseudos)
        available_count = sum(1 for p in pseudos if p.get('is_available', False))
        unavailable_count = total_count - available_count
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        header = f"<b>–í—Å–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã ({total_count})</b>\n\n"
        header += f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        header += f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
        header += f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {unavailable_count}\n\n"
        header += f"<b>–°–ø–∏—Å–æ–∫:</b>\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
        lines = []
        for p in pseudos:
            status_icon = "‚úÖ" if p.get('is_available', False) else "‚ùå"
            status_text = "–î–æ—Å—Ç—É–ø–µ–Ω" if p.get('is_available', False) else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            lines.append(f"{status_icon} <b>ID {p['id']}:</b> \"{p['pseudo']}\" | {p['price']} —Ç. | {status_text}")
        
        text = header + '\n'.join(lines)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 4096:
            parts = []
            current_part = ""
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    parts.append(header + current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            if current_part:
                parts.append(header + current_part)
            
            for i, part in enumerate(parts, 1):
                await message.answer(f"{part}\n\nüìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i} –∏–∑ {len(parts)}</b>", parse_mode='HTML')
        else:
            await message.answer(text, parse_mode='HTML')

    @dp.message(Command("deactivate"))
    async def deactivate_handler(message: types.Message):
        if not message.text:
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deactivate pseudo_id')
            return
        parts = message.text.split()
        if len(parts) < 2 or not parts[1].isdigit():
            await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deactivate pseudo_id')
            return
        pseudo_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–µ
        pseudos = await get_all_pseudo_names()
        pseudo_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if isinstance(pseudos, list):
            for pseudo in pseudos:
                if pseudo.get('id') == pseudo_id:
                    pseudo_name = pseudo.get('pseudo', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    break
        
        result = await deactivate_pseudo_name(pseudo_id)
        
        if 'success' in result:
            deactivate_message = f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            deactivate_message += f"<b>–ò–º—è:</b> \"{pseudo_name}\"\n"
            deactivate_message += f"<b>ID:</b> {pseudo_id}\n"
            deactivate_message += f"<b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
            deactivate_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
            deactivate_message += f"<b>–ê–¥–º–∏–Ω:</b> {message.from_user.username or message.from_user.first_name}"
        else:
            deactivate_message = f"<b>–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
            deactivate_message += f"<b>–ò–º—è:</b> \"{pseudo_name}\"\n"
            deactivate_message += f"<b>ID:</b> {pseudo_id}\n"
            deactivate_message += f"<b>–û—à–∏–±–∫–∞:</b> {result}"
        
        await message.answer(deactivate_message, parse_mode="HTML")

    @dp.message(Command("stats"))
    async def stats_handler(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤
            active_posts_count = await get_active_posts_count()
            posts_data = await get_recent_posts()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤
            total_posts = 0
            posted_posts = 0
            rejected_posts = 0
            
            if isinstance(posts_data, dict) and 'results' in posts_data:
                posts = posts_data['results']
                total_posts = len(posts)
                posted_posts = sum(1 for p in posts if p.get('is_posted', False))
                rejected_posts = sum(1 for p in posts if p.get('is_rejected', False))
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
            pseudos = await get_all_pseudo_names()
            total_pseudos = 0
            available_pseudos = 0
            
            if isinstance(pseudos, list):
                total_pseudos = len(pseudos)
                available_pseudos = sum(1 for p in pseudos if p.get('is_available', False))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_message = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            stats_message += f"<b>–î–∞—Ç–∞:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            
            stats_message += f"<b>–ü–æ—Å—Ç—ã:</b>\n"
            stats_message += f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
            stats_message += f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {posted_posts}\n"
            stats_message += f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_posts}\n"
            stats_message += f"–í –æ—á–µ—Ä–µ–¥–∏: {active_posts_count}\n\n"
            
            stats_message += f"<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º—ã:</b>\n"
            stats_message += f"–í—Å–µ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤: {total_pseudos}\n"
            stats_message += f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_pseudos}\n"
            stats_message += f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {total_pseudos - available_pseudos}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            stats_message += f"<b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
            stats_message += f"–ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω\n"
            stats_message += f"API: –†–∞–±–æ—Ç–∞–µ—Ç\n"
            stats_message += f"–ê–¥–º–∏–Ω: {message.from_user.username or message.from_user.first_name}"
            
            await message.answer(stats_message, parse_mode="HTML")
            
        except Exception as e:
            error_message = f"<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            error_message += f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n"
            error_message += f"<b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}"
            await message.answer(error_message, parse_mode="HTML")

    @dp.message(Command("getuser"))
    async def getuser_handler(message: types.Message):
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getuser <username –∏–ª–∏ ID>")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getuser <username –∏–ª–∏ ID>")
            return
        query = parts[1].strip().lstrip('@')
        if not query:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫, —á–∞—Å—Ç—å –Ω–∏–∫–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —á–∏—Å–ª–æ–≤—ã–º ID
        if query.isdigit():
            user_id = int(query)
            user_info = await get_user_info(user_id)
            if 'error' not in user_info:
                user = user_info
                reply = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID:</b>\n\n"
                reply += (
                    f"ID: <code>{user['id']}</code>\n"
                    f"Username: @{user.get('username') or 'N/A'}\n"
                    f"–ò–º—è: {user.get('firstname', '')} {user.get('lastname', '')}\n"
                    f"–ë–∞–ª–∞–Ω—Å: {user.get('balance', 'N/A')}\n"
                    f"–£—Ä–æ–≤–µ–Ω—å: {user.get('level', 'N/A')}\n"
                    f"–ê–¥–º–∏–Ω: {'–î–∞' if user.get('is_admin') else '–ù–µ—Ç'}\n"
                    f"–ë–∞–Ω: {'–î–∞' if user.get('is_banned') else '–ù–µ—Ç'}\n"
                )
                await message.answer(reply, parse_mode="HTML")
                return
            else:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –ï—Å–ª–∏ –Ω–µ ID, –∏—â–µ–º –ø–æ username –∏ –∏–º–µ–Ω–∏
        users = await get_all_users()
        if not users:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ username –∏ firstname/lastname
        candidates = []
        for u in users:
            uname = (u.get('username') or '').lower()
            fname = (u.get('firstname') or '').lower()
            lname = (u.get('lastname') or '').lower()
            full = f"{fname} {lname}".strip()
            candidates.append((u, uname, full))
        # –°—á–∏—Ç–∞–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å
        scored = []
        for u, uname, full in candidates:
            score = max(
                difflib.SequenceMatcher(None, query.lower(), uname).ratio(),
                difflib.SequenceMatcher(None, query.lower(), full).ratio()
            )
            scored.append((score, u))
        scored.sort(reverse=True, key=lambda x: x[0])
        top = [u for score, u in scored if score > 0.3][:5]
        if not top:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —á–∞—Å—Ç—å –Ω–∏–∫–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        reply = "<b>–ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for u in top:
            reply += (
                f"ID: <code>{u['id']}</code>\n"
                f"Username: @{u.get('username') or 'N/A'}\n"
                f"–ò–º—è: {u.get('firstname', '')} {u.get('lastname', '')}\n"
                f"–ë–∞–ª–∞–Ω—Å: {u.get('balance', 'N/A')}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {u.get('level', 'N/A')}\n"
                f"–ê–¥–º–∏–Ω: {'–î–∞' if u.get('is_admin') else '–ù–µ—Ç'}\n"
                f"–ë–∞–Ω: {'–î–∞' if u.get('is_banned') else '–ù–µ—Ç'}\n"
                "----------------------\n"
            )
        await message.answer(reply, parse_mode="HTML")

    @dp.message(Command("queue"))
    async def queue_handler(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞—Ö –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if not await is_admin(message.from_user.id):
            await message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã</b>")
            return
        
        queue_info = await get_queue_info()
        
        if 'error' in queue_info:
            await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:</b> {queue_info['error']}")
            return
        
        posts = queue_info.get('results', [])
        count = len(posts)
        
        if count == 0:
            await message.answer("<b>üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤</b>\n\n<blockquote>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</blockquote>", parse_mode="HTML")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞—Ö
        queue_message = f"<b>üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤</b>\n\n"
        queue_message += f"<b>–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {count} –ø–æ—Å—Ç–æ–≤\n"
        queue_message += f"<b>–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
        
        for i, post in enumerate(posts, 1):
            author_id = post.get('author', 'N/A')
            content = post.get('content', '')
            posted_at_str = post.get('posted_at', 'N/A')
            post_id = post.get('id', 'N/A')
            telegram_id = post.get('telegram_id', 'N/A')
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                if posted_at_str and ('+' in posted_at_str or 'Z' in posted_at_str):
                    posted_dt = datetime.strptime(posted_at_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                    posted_dt = posted_dt.astimezone(timezone(timedelta(hours=3)))
                    formatted_time = posted_dt.strftime('%d.%m.%Y –≤ %H:%M')
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    now = datetime.now(timezone(timedelta(hours=3)))
                    time_diff = (posted_dt - now).total_seconds()
                    
                    if time_diff > 0:
                        hours = int(time_diff // 3600)
                        minutes = int((time_diff % 3600) // 60)
                        if hours > 0:
                            time_until = f"—á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                        else:
                            time_until = f"—á–µ—Ä–µ–∑ {minutes}–º"
                        status_emoji = "‚è≥"
                    else:
                        time_until = "–≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                        status_emoji = "‚úÖ"
                else:
                    formatted_time = posted_at_str
                    time_until = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    status_emoji = "‚ùì"
            except Exception as e:
                formatted_time = posted_at_str
                time_until = "–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
                status_emoji = "‚ùå"
            
            # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            content_preview = content[:80] + '...' if len(content) > 80 else content
            if not content_preview.strip():
                content_preview = "<i>–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</i>"
            
            queue_message += f"<b>{i}.</b> {status_emoji} <b>–ü–æ—Å—Ç #{post_id}</b>\n"
            queue_message += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author_id}\n"
            queue_message += f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {content_preview}\n"
            queue_message += f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {formatted_time}\n"
            queue_message += f"üïê <b>–°—Ç–∞—Ç—É—Å:</b> {time_until}\n"
            queue_message += f"üÜî <b>Telegram ID:</b> {telegram_id}\n"
            queue_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å—Ç–µ
        if posts:
            first_post = posts[0]
            first_post_time = first_post.get('posted_at')
            if first_post_time:
                try:
                    if '+' in first_post_time or 'Z' in first_post_time:
                        first_dt = datetime.strptime(first_post_time.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                        first_dt = first_dt.astimezone(timezone(timedelta(hours=3)))
                        now = datetime.now(timezone(timedelta(hours=3)))
                        time_to_first = (first_dt - now).total_seconds()
                        
                        if time_to_first > 0:
                            hours = int(time_to_first // 3600)
                            minutes = int((time_to_first % 3600) // 60)
                            if hours > 0:
                                next_post_info = f"—á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
                            else:
                                next_post_info = f"—á–µ—Ä–µ–∑ {minutes}–º"
                        else:
                            next_post_info = "–≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                        
                        queue_message += f"<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                        queue_message += f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: {next_post_info}\n"
                        queue_message += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {POST_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n"
                        queue_message += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: 01:00-10:00 (–ø–æ—Å—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –Ω–∞ 10:00)\n"
                except:
                    pass
        
        await message.answer(queue_message, parse_mode="HTML")

    @dp.message(Command("queueupdate"))
    async def queueupdate_handler(message: types.Message):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if not await is_admin(message.from_user.id):
            await message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã</b>")
            return
        
        await message.answer("<b>–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ—Å—á–µ—Ç –æ—á–µ—Ä–µ–¥–∏...</b>")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –æ—á–µ—Ä–µ–¥–∏
            result = await recalculate_queue_after_immediate_publication()
            
            if 'error' in result:
                await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ—á–µ—Ä–µ–¥–∏:</b> {result['error']}")
                return
            
            updated_count = result.get('updated_count', 0)
            status_message = result.get('message', '–ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
            
            if updated_count == 0:
                await message.answer("<b>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—á–µ–≥–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å</b>")
            else:
                await message.answer(f"<b>{status_message}</b>\n\n<b>–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:</b> {updated_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
                queue_info = await get_queue_info()
                if 'error' not in queue_info:
                    posts = queue_info.get('posts', [])
                    count = queue_info.get('count', 0)
                    
                    if count > 0:
                        queue_message = f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤</b>\n\n"
                        queue_message += f"<b>–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {count} –ø–æ—Å—Ç–æ–≤\n\n"
                        
                        for i, post in enumerate(posts, 1):
                            author_id = post.get('author', 'N/A')
                            content = post.get('content', '')[:50] + '...' if len(post.get('content', '')) > 50 else post.get('content', '')
                            posted_at_str = post.get('posted_at', 'N/A')
                            post_id = post.get('id', 'N/A')
                            
                            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                            try:
                                if posted_at_str and ('+' in posted_at_str or 'Z' in posted_at_str):
                                    posted_dt = datetime.strptime(posted_at_str.replace('Z', '+0000'), "%Y-%m-%dT%H:%M:%S%z")
                                    posted_dt = posted_dt.astimezone(timezone(timedelta(hours=3)))
                                    formatted_time = posted_dt.strftime('%d.%m.%Y –≤ %H:%M')
                                else:
                                    formatted_time = posted_at_str
                            except:
                                formatted_time = posted_at_str
                            
                            queue_message += f"<b>{i}.</b> üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author_id}\n"
                            queue_message += f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {content}\n"
                            queue_message += f"‚è∞ <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {formatted_time}\n"
                            queue_message += f"üÜî <b>ID –ø–æ—Å—Ç–∞:</b> {post_id}\n\n"
                        
                        await message.answer(queue_message, parse_mode="HTML")
                
        except Exception as e:
            logging.exception(f"[queueupdate_handler] Exception: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")

    @dp.message(Command("makeadmin"))
    async def makeadmin_handler(message: types.Message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
        if message.from_user.id != 914029246:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        if not message.text:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin <user_id>")
            return
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin <user_id>")
            return
        user_id = parts[1]
        if not user_id.isdigit():
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        if 'error' in user_info:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {user_info['error']}")
            return
        
        username = user_info.get('username', 'N/A') or user_info.get('firstname', 'N/A')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API
        headers = {'Content-Type': 'application/json'}
        API_URL = f"http://backend:8000/api/users/{user_id}/"
        update_data = {'is_admin': True}
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.patch(API_URL, headers=headers, json=update_data) as response:
                    if response.status == 200:
                        result = await response.json()
                        await message.answer(
                            f"‚úÖ <b>–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n"
                            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y –≤ %H:%M')}\n"
                            f"üëÆ <b>–°—É–ø–µ—Ä–∞–¥–º–∏–Ω:</b> {message.from_user.username or message.from_user.first_name}",
                            parse_mode="HTML"
                        )
                    else:
                        error_text = await response.text()
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤: {response.status} - {error_text}")
        except Exception as e:
            logging.error(f"[makeadmin_handler] Exception: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤: {str(e)}")